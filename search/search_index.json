{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Ramdocs <p>The official source of documentation and training materials for the 2204 Rambots</p> <p>Visit our main website at rambots.org or contact us at contact@rambots.org</p>"},{"location":"handbook.html","title":"Student Handbook","text":"<p>Student Contract</p> <p>You can find the student contract here</p>"},{"location":"handbook.html#about-the-handbook","title":"About the Handbook","text":"<p>This handbook is intended to contain the information needed for all Team 2204 (Rambots) members to understand the administrative and logistical procedures for participating in the FIRST Robotics Competition. It is updated yearly by the Core Leadership team to accurately represent current standards and guidelines for the team.</p>"},{"location":"handbook.html#introduction-to-first","title":"Introduction to FIRST","text":"<p>FIRST is a non-profit organization founded in 1989 by inventor Dean Kamen. It aims to inspire young people to pursue careers in science, technology, engineering, and mathematics (STEM) through exciting and challenging robotics competitions. FIRST offers programs for students for all ages, promoting critical thinking, problem-solving, and teamwork. Its focus on hands-on learning and real-world problem-solving has made it a global phenomenon, with teams from all over the world participating in its competitions.</p> <p>Participating in FIRST programs not only benefits students in the short term by developing their STEM skills and teamwork abilities, but also in the long term by providing access to a vast network of professionals and potential career opportunities. FIRST alumni have gone on to pursue successful careers in a variety of fields, including engineering, business, and medicine, and many credit FIRST for helping them achieve their goals. The focus on hands-on learning, problem-solving, and teamwork has helped students develop valuable skills that are in high demand in today's job market. Moreover, the FIRST community provides a valuable network of mentors, industry professionals, and peers who offer guidance, support, and inspiration to students as they navigate their future careers.</p>"},{"location":"handbook.html#introduction-to-the-first-robotics-competition-frc","title":"Introduction to the FIRST Robotics Competition (FRC)","text":"<p>The FIRST Robotics Competition (FRC) is an exciting program that challenges high school students to design, build, and program robots to compete in a game that changes every year. Founded in 1992, FRC combines the excitement of a varsity sport with the rigor of science and technology, promoting critical thinking, problem-solving, and teamwork.</p> <p>Each year, FRC releases a new game that requires teams to build a robot that can perform specific tasks. Teams have six weeks to design, build, and program their robot before competing in regional events. The competitions are held in arenas where teams compete head-to-head to complete the game's objectives.</p> <p>Through participation in FRC, students develop essential life skills such as leadership, communication, and problem-solving, which can benefit them both academically and professionally. FRC provides a unique and exciting opportunity for students to apply their knowledge in a real-world setting and develop valuable skills that will serve them well in the future.</p> <p>Learn more about the FIRST and their other programs at firstinspires.org</p>"},{"location":"handbook.html#about-the-team","title":"About the Team","text":"<p>The Rambots, Team 2204 are a FIRST (For Inspiration and Recognition of Science and Technology) Robotics team located at the California Crosspoint Academy in Hayward, CA in the San Francisco Bay Area. They were established in 2007 in San Leandro, California. Since then, the school has moved to Hayward and provides students with a chance to pursue their interests in science, technology, engineering, and mathematics. The team is proud of its history and eager to contribute to the advancement of STEAM (science, technology, engineering, art, and mathematics) education.</p>"},{"location":"handbook.html#awards","title":"Awards","text":"<ul> <li>2023 Creativity Award for our flexible 3D Printed Robot Claw</li> <li>2020 Woodie Flowers Mentor Award for our mentor, Gary Gin</li> </ul>"},{"location":"handbook.html#mentors","title":"Mentors","text":"<p>Our team's mentors are industry professionals, teachers, parents, and community members who bring a wealth of knowledge and experience to our program. They work alongside students to teach, guide, and lead them throughout the season. With their technical expertise and real-world experience, our mentors help students develop their skills and achieve their goals. They are integral to the success of our team, providing valuable insight and guidance that helps us succeed both on and off the competition field.</p> <p>Gary Gin is the most experienced mentor on our team, having been with us from when the team started. He is highly skilled in various areas, including mechanical engineering, design, and electrical systems. Gary has also been a competitor on the popular television show, BattleBots.</p> <p>Earl Chen is our robotics team\u2019s staff sponsor. He guides us in logistics, trip planning, finances, and well as offering advice to our build team. Thanks to his mentorship, our team is able to stay organized and on track.</p> <p>Jason Hom has been a mentor and friend to our school since nearly the beginning of our team\u2019s journey. Drawing from his industry experience, Mr. Hom assists with programming, fabrication, and design. Additionally, he provides valuable management insights to our business and leadership teams. His contributions have been instrumental in shaping our team\u2019s growth and development.</p> <p>Melissa Fong provides her mentorship and guidance the business and logistical aspects of our team. As a former student and now an alumni of our team, she also excels in guiding our leadership team, steering them with clarity and purpose.</p> <p>Rodney Lim is a highly experienced mentor with expertise in electrical and electronics, as well as computer science. He has been with our team for five years and brings 44 years of industry experience.</p> <p>Sam Cao has been mentoring our robotics team for three years, providing guidance in engineering problem solving, project management, CAD, rapid prototyping, and 3D printing. As a former student of our program, he has shared his experience and knowledge with our students, and has been a positive role model, demonstrating the principles of FIRST through Gracious Professionalism.</p>"},{"location":"handbook.html#teams-structure-and-roles","title":"Teams Structure and Roles","text":""},{"location":"handbook.html#student-leadership","title":"Student Leadership","text":"<p>The core leadership team comprises the team captain, and subteam leads. For this year, that would be build lead, EECS lead, and business lead.</p> <p>The captain of the team will be chosen from the previous year\u2019s core leadership.</p> <p>Team Captain: James Ding</p> <ul> <li>Team captain serves as primary point of contact and liaison between team and others</li> <li>Responsibilities include leading team meetings and facilitating decision-making processes</li> <li>Works closely with other team leaders to coordinate and oversee team activities</li> <li>Activities include CAD/programming work and project management</li> <li>Leadership and communication skills of team captain are essential</li> <li>Ensures team operates effectively and efficiently throughout the season</li> </ul> <p>Build Lead: Ethan Wu</p> <ul> <li>Lead design and prototyping, making critical decisions on robot's form and function.</li> <li>Coordinate daily work of build team, ensuring timely completion of high-quality tasks.</li> <li>Collaborate with programming team to integrate software and hardware components.</li> </ul> <p>EECS Lead: Bryan Yu</p> <ul> <li>Coordinate the team's electrical, electronics, and computer science work.</li> <li>Work closely with the programming team to integrate software and hardware components.</li> <li>Ensure that the team's electrical and electronics work is safe, reliable, and meets competition requirements.</li> </ul> <p>Business Lead: Brian Ding and Aiden Lee</p> <ul> <li>Manage team's finances, including accounting, purchasing, and record-keeping.</li> <li>Plan and coordinate team events, including travel arrangements and logistics.</li> <li>Establish and maintain relationships with sponsors, school officials, volunteers, and mentors</li> </ul> How are students selected for leadership positions? <p>After the season ends, all students are given the opportunity to apply for leadership positions. The application process to become apart of core leadership will often require you to submit an written statement of why you are fit for the position. Other leadership positions do not require a written statement, but are encouraged to do so. The current core leadership team will review the applications and select the the new core leadership team.</p> <p>Next, the new core leadership team will choose the subteam leads from the previous year's subteam members.</p>"},{"location":"handbook.html#subteams","title":"Subteams","text":""},{"location":"handbook.html#design-fabrication","title":"Design &amp; Fabrication","text":"<p>The fabrication team utilizes part drawings and industrial machinery like mills, lathes, and routers to manufacture parts required for the robot.</p>"},{"location":"handbook.html#electrical","title":"Electrical","text":"<p>The electrical team is responsible for wiring the robot and installing any required pneumatic systems. They are tasked with ensuring that the mechanical systems, which were designed and built by the mechanical team, can be controlled effectively.</p>"},{"location":"handbook.html#programming","title":"Programming","text":"<p>The programming team develops software in Java/Kotlin to control the robot's functions by integrating data from sensors such as encoders, limit switches, and vision systems. Their code ensures the robot performs effectively and safely in autonomous and teleoperated modes.</p>"},{"location":"handbook.html#business","title":"Business","text":"<p>The business team plays a critical role in managing the financial and public relations aspects of the project. They are responsible for budgeting, fundraising, and securing sponsorships to support the team's activities. They also handle social media and audiovisual tasks, as well as maintaining relationships to ensure the team\u2019s success.</p>"},{"location":"handbook.html#expectations","title":"Expectations","text":""},{"location":"handbook.html#attendance-policy","title":"Attendance Policy","text":"<p>Attendance is taken at every team meeting by each subteam lead. You are required to notify team leadership about late arrivals and absences. You should contact your subteam lead by email, Discord, or Teams as soon as possible, preferably at least 24 hours in advance. Longer absences should be communicated earlier. These are the following criteria for attendance:</p> <ul> <li>Present<ul> <li>Being physically present is not enough\u2014students must be attentive and productive during meeting time to be marked \"present.\" Present markings will count positively towards your attendance percentage.</li> </ul> </li> <li>Absent Notified &amp; Partial Notified<ul> <li>If you know ahead of time that you will miss a meeting, your subteam lead should be informed at least 24 hours prior to the meeting. If you do so, your absence will be marked as \u201cnotified\u201d and you will have the ability to make up for your absence. All notified absences are still counted negatively towards your attendance percentage.</li> </ul> </li> <li>Absent Made Up &amp; Partial Made Up <ul> <li>For notified absences ONLY, you have the ability to make up any work from the meeting, including homework and self-studying any material covered during training. If this action is taken, the absence will be counted positively towards your attendance percentage. It is YOUR responsibility to proactively ask the subteam lead for work to make up.</li> </ul> </li> <li>Absent Unnotified &amp; Partial Unnotified <ul> <li>Unnotified absences cannot be made up and will count negatively towards your attendance percentage.</li> </ul> </li> <li>Unproductive <ul> <li>If you are not sufficiently productive or are distracting others during a meeting, the subteam lead may mark you \u201cunproductive.\u201d You will be given warnings when you are marked unproductive so you know what behavior was at fault and should not be repeated. Being marked \u201cunproductive\u201d will count negatively towards your attendance percentage and cannot be made up.</li> </ul> </li> </ul>"},{"location":"handbook.html#attendance-evaluations","title":"Attendance Evaluations","text":"<p>Members must be able to attend 70% of all meetings. To track your attendance, use the rambot Discord bot on our Discord server.</p> <p>Regular attendance is essential for achieving success in any team or educational setting. It enables team members to stay informed, collaborate effectively, track progress, and allocate tasks efficiently. Moreover, attendance demonstrates a commitment to the team and its objectives, which helps build trust, respect, and team cohesion.</p>"},{"location":"handbook.html#monthly-member-evaluations","title":"Monthly Member Evaluations","text":"<p>At the end of each month, the team roster will undergo a re-evaluation to ensure that only committed members remain on the team. Typically, students with an attendance rate below 75% will be subject to review. Those who fall below this threshold in the current month will be warned by a member of leadership, usually their subteam lead.</p> <p>Apart from attendance, dismissal from the team may also be influenced by other factors. Reasons for dismissal may include, but is not limited to factors like behavior during team meetings, level of initiative, work ethic, and overall contribution to the team environment.</p> <p>Subteam leads will engage with students who are not meeting the necessary requirements to stay on the team or are exhibiting behavior that puts them at risk of being dismissed. If it is determined that a student should be removed from the team, they and their parents will be informed.</p>"},{"location":"handbook.html#mental-health-days","title":"Mental Health Days","text":"<p>We recognize that balancing the robotics season with school, family, and other responsibilities can become stressful and wear on a student\u2019s mental and physical health. The health of a student is always our first priority, and thus we offer members the option of Mental Health Days. When needed, every student may make use of a Mental Health Day, where they can choose to either arrive late to a meeting, leave early, or not attend. There is no defined reason to use a Mental Health Day\u2014mounting stress, family responsibilities, and other events are all equally valid. Unless your use of mental health days become excessive, there will be no questions asked. In the case of excessive usage, the subteam lead will speak with you about their circumstances and the best way for you to proceed. You must notify your subteam lead in advance when possible and the absence will be excused</p>"},{"location":"handbook.html#student-conduct","title":"Student Conduct","text":"<p>As members of our FIRST Robotics team, we uphold a high standard of behavior and conduct. We believe that a positive team atmosphere is essential for achieving our goals and fostering personal growth. All team members are expected to:</p> <ul> <li>Respect Others: Treat teammates, mentors, volunteers, and competitors with respect and kindness. Differences in opinions and backgrounds should be celebrated.</li> <li>Teamwork: Collaborate effectively and communicate openly. Share ideas, listen actively, and contribute positively to team discussions and projects.</li> <li>Positive Attitude: Maintain a positive attitude, even in challenging situations. Encourage and support fellow team members to create a motivating and uplifting environment.</li> <li>Safety First: Prioritize safety at all times. Follow safety guidelines and report any unsafe conditions immediately to mentors or team leaders.</li> <li>Punctuality: Be punctual for team meetings, practices, and events. Respect your peers' time and commitment.</li> </ul>"},{"location":"handbook.html#gracious-professionalism","title":"Gracious Professionalism","text":"<p>We embrace the concept of Gracious Professionalism \u2013 a FIRST core value that combines respect and cooperation. We strive to compete fiercely while maintaining empathy and respect for others. This means:</p> <ul> <li>Helping Others: Offer assistance to other teams when possible. Share knowledge, tools, and resources to help everyone succeed.</li> <li>Positive Competition: Compete to the best of your ability while respecting opponents. Win with humility and lose with grace.</li> <li>Building Connections: Foster a sense of community within the larger FIRST Robotics family. Network and build relationships with teams from different backgrounds and regions.</li> </ul>"},{"location":"handbook.html#workspace-rules","title":"Workspace Rules","text":"<p>To ensure a safe and productive environment, adhere to these workspace rules:</p> <ul> <li>Safety Gear: Wear appropriate safety gear, such as safety glasses, closed-toe shoes, and any other protective equipment when working in the workshop.</li> <li>Cleanliness: Keep the workspace organized and clean. Return tools and materials to their designated places after use.</li> <li>Supervision: A adult mentor is required to supervise you in the workshop. Follow mentor guidance when using tools and equipment you're not familiar with.</li> </ul>"},{"location":"handbook.html#dress-code","title":"Dress Code","text":"<p>When representing the team at events, presentations, and meetings:</p> <ul> <li>Team Attire: Wear the official team attire, such as team shirts or uniforms, during competitions and outreach events.</li> <li>Appropriateness: Dress in a manner that reflects positively on the team and its values.</li> <li>Safety: Make sure your clothing is safe and does not cause any potential safety hazards. Talk to a member of the safety team for questions.</li> <li>Hair: If using equipment, make sure to tie up long hair to ensure it does not interfere with the equipment or cause any safety hazards</li> </ul>"},{"location":"handbook.html#accountability","title":"Accountability","text":"<p>We hold ourselves accountable for our actions and commitments:</p> <ul> <li>Commitment: Honor your commitments to the team. Be responsible for completing tasks and meeting deadlines.</li> <li>Communication: If you're facing challenges that affect your involvement, communicate openly with mentors and team leaders to find solutions.</li> <li>Quality Work: Strive for excellence in all team endeavors. Take pride in your contributions and ensure they meet the team's standards.</li> </ul> <p>Reprecussions</p> <p>Failure to adhere to the team's conduct and rules may result in consequences, which could include:</p> <ul> <li>Verbal Warning: A mentor or team leader will discuss the issue with you and provide guidance on resolving it.</li> <li>Probation: You might be placed on probation, during which your actions and behavior will be closely monitored.</li> <li>Loss of Privileges: If the behavior continues, you might lose certain privileges, such as attending events or using the workshop.</li> <li>Dismissal: In extreme cases, repeated or severe violations of conduct may lead to your removal from the team.</li> </ul> <p>It is our belief that by following these guidelines, we can create a respectful, collaborative, and successful team environment that will benefit everyone involved.</p>"},{"location":"handbook.html#costs","title":"Costs","text":"<p>The cost to join the team is $300, which covers the cost of team registration, materials, tools, and other expenses. Costs for trips to competitions are not included. However, we do not want the fee to be a barrier to entry, so we offer financial assistance to waive the fee for students who need it. If you need financial aid, please reach out to one of the mentors.</p>"},{"location":"handbook.html#parent-support","title":"Parent Support","text":""},{"location":"handbook.html#donations","title":"Donations","text":"<p>Approximately 25% of our team's income comes from parent donations, which help ensure that we can operate at our full potential. While donations are not mandatory, we greatly appreciate any support that we receive. Our team relies on the generosity of our community to provide valuable opportunities for our students in the areas of science, technology, engineering, and mathematics (STEM).</p>"},{"location":"handbook.html#volunteers","title":"Volunteers","text":"<p>It's important to note that not all parents may be in a position to make monetary donations. However, there are other ways that parents can support the team. Parents play a significant role in supporting their children's involvement in this team.</p>"},{"location":"handbook.html#food","title":"Food","text":"<p>Parents are kindly requested to sign up for providing meals on either Wednesday dinner or Saturday lunch for the team. In cases where they are unable to bring food in person, alternative arrangements can be made by utilizing food delivery services such as DoorDash, Uber Eats, Postmates, and others. Your participation is greatly appreciated in ensuring the team's nourishment during these meals.</p>"},{"location":"handbook.html#events","title":"Events","text":"<p>During the competitions, parents can help facilitate students at the competitions.</p>"},{"location":"handbook.html#meetings-schedule","title":"Meetings Schedule","text":"<p>You can find the meeting schedule at rambots.org/schedule</p>"},{"location":"handbook.html#major-events","title":"Major Events","text":""},{"location":"handbook.html#chezy-champs","title":"Chezy Champs","text":"<p>The Chezy Champs is an off season event hosted by Team 254: The Cheezy Poofs. It is held at Bellarmine College Preparatory School in San Jose, California.</p>"},{"location":"handbook.html#kickoff","title":"Kickoff","text":"<p>Kickoff this year is on January 6, 2023</p>"},{"location":"handbook.html#san-francisco-regional-casf","title":"San Francisco Regional (CASF)","text":"<p>The San Francisco Regional is hosted at Saint Ignatius College Preparatory School. The event is held on March 16 to March 19. Our team has never been to the San Francisco Regional</p>"},{"location":"handbook.html#sacramento-regional-cada","title":"Sacramento Regional (CADA)","text":"<p>The Sacramento Regional is hosted at the UC Davis Arc Pavilion. It is held on March 23 and goes to March 26. Our team has always gone to the Sacramento Regional and is considered a tradition.</p>"},{"location":"handbook.html#silicon-valley-regional-casj","title":"Silicon Valley Regional (CASJ)","text":"<p>The Silicon Valley Regional is hosted at the event center at San Jose State University. The event is held on April 5-8. We have never competed at the Silicon Valley Regional.</p>"},{"location":"handbook.html#houston-championships","title":"Houston Championships","text":"<p>The Houston Championships is where the world championships are held. Our team has never competed in the world championships.</p>"},{"location":"handbook.html#credits","title":"Credits","text":"<p>This handbook was inspired by Citrus Circuit\u2019s handbook.</p>"},{"location":"handbook.html#contact-points","title":"Contact Points","text":"<p>You may contact any of the student leadership team or mentors for any questions or concerns.</p> <p>Visit our contact page for more information.</p>"},{"location":"student-contract.html","title":"Student Contract","text":"<p>Please sign this page and submit it with your permission slip.</p> <p>By signing below, I, the student, agree to the following:</p> <ul> <li>I have read and understood the 2204 Rambots Team Handbook.</li> <li>I understand that to be considered a team member of the 2204 Rambots, I must follow and fulfill the criteria outlined in Expectations</li> <li>I understand I am participating in a collaborative competitive team environment. I will respect any decisions made by the coaches, mentors, or teachers involved in the program regarding my participation on the team.</li> <li>I commit to attending 75% of all team meetings on a monthly basis.</li> <li>I have read and understood the expectations for alerting Team Leadership of absences before competitions .</li> <li>I will behave in a responsible, mature, and graciously professional manner while on or representing the team.</li> <li>I understand that I can always bring problems to the attention of team leadership.</li> </ul> <p>Student: \uff3f\uff3f\uff3f\uff3f\uff3f Signature: \uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f  Date: \uff3f\uff3f\uff3f\uff3f\uff3f\uff3f</p> <p>By signing below, I, a parent/guardian, agree with the following:</p> <ul> <li>I have read and understood the 2204 Rambots Team Handbook.</li> <li>I have read and understood the expectations for alerting Team Leadership of absence during a competition </li> <li>I understand that for my child to be considered a team member of the 2204 Rambots, and they must follow and fulfill the criteria outlined in Section 4.aa</li> <li>I understand that my child is participating in a collaborative competitive team environment. Therefore, I will respect any decisions made by the mentors or teachers involved in the program regarding my child's participation on the team.</li> <li>I understand my child has committed to attending 75% of all team meetings on a monthly basis.</li> <li>I understand that my child is expected to be respectful, mature, and responsible.</li> <li>If they have a question or concern about the team, I can let them interact with team leadership for themselves.</li> </ul> <p>Parent/Guardian: \uff3f\uff3f\uff3f\uff3f\uff3f Signature: \uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f\uff3f  Date: \uff3f\uff3f\uff3f\uff3f\uff3f\uff3f</p>"},{"location":"business/branding.html","title":"Branding","text":""},{"location":"business/branding.html#names","title":"Names","text":"<ul> <li>Rambots</li> <li>2204 Rambots</li> <li>Team 2204</li> <li>The Rambots</li> <li>Team 2204 \u201cThe Rambots\u201d</li> </ul>"},{"location":"business/branding.html#fonts","title":"Fonts","text":""},{"location":"business/branding.html#helvetica-neue","title":"Helvetica Neue","text":"<p>This is the default font used in assets and documents</p>"},{"location":"business/branding.html#colors","title":"Colors","text":""},{"location":"business/branding.html#rambot-red","title":"Rambot Red","text":"<p>This color is primarily used as a background color. This color is also by our school.</p> <p>Color Code: <code>#A31F36</code></p>"},{"location":"business/branding.html#rambot-yellow","title":"Rambot Yellow","text":"<p>This color is the opposite color of Rambot Red. Used for text/logo.</p> <p>Color Code: <code>#F4A81C</code></p>"},{"location":"business/branding.html#logos","title":"Logos","text":""},{"location":"business/branding.html#robo-ram-main-logo","title":"Robo Ram - Main Logo","text":"<p>Click here to download PNG version</p> <p>Click here to download SVG vector version</p>"},{"location":"business/branding.html#robo-ram-profile-picture","title":"Robo Ram - Profile Picture","text":"<p>Click here to download PNG version</p>"},{"location":"business/overview.html","title":"Overview","text":"<p>Here is an overview of the things that business team does pre-season, during the season, and post season.</p>"},{"location":"business/overview.html#fundraising-and-sponsorship","title":"Fundraising and Sponsorship","text":"<p>Funding is essential for covering competition costs, purchasing equipment, and sustaining team operations. Here are some strategies we use for successful fundraising and sponsorships:</p> <ul> <li> <p>Outreach and Networking: Reach out to local businesses, corporations, and community organizations to build relationships and secure sponsorships.</p> </li> <li> <p>Fundraising: Organize engaging fundraising events within our community, school, or online.</p> </li> </ul>"},{"location":"business/overview.html#grant-opportunities","title":"Grant Opportunities","text":"<p>Explore potential grants and funding opportunities specifically available to FIRST Robotics teams:</p> <ul> <li> <p>FIRST Grants: Check the official FIRST website for grant opportunities available to registered teams.</p> </li> <li> <p>STEM Foundations: Research and apply for grants from local or national STEM-focused foundations.</p> </li> <li> <p>Corporate Grants: Some companies offer grants to support STEM education initiatives and may be interested in supporting FIRST teams.</p> </li> </ul> <p>Tip</p> <p>Remember that successful business practices, combined with technical expertise, are instrumental in ensuring our team's sustainability and growth. Use these resources as a starting point to develop a robust business strategy that complements your engineering efforts.</p>"},{"location":"business/overview.html#team-budgeting-and-financial-management","title":"Team Budgeting and Financial Management","text":"<p>Maintaining a clear and well-managed budget is crucial for responsible financial decision-making. Consider the following steps:</p> <ul> <li> <p>Budget Planning: Create a comprehensive budget that includes estimated expenses and potential income from sponsorships and fundraising.</p> </li> <li> <p>Expense Tracking: Keep track of all expenses and income throughout the season, ensuring accountability and transparency.</p> </li> <li> <p>Financial Reporting: Regularly update the team about the financial status and progress toward meeting financial goals.</p> </li> </ul>"},{"location":"business/overview.html#public-relations-and-marketing","title":"Public Relations and Marketing","text":"<p>Effectively communicating our team's mission, achievements, and activities to the public:</p> <ul> <li> <p>Newsletter: Informing parents and the general public about team updates, milestones, and events.</p> </li> <li> <p>Blog Posts: Writing various blog posts about major team milestones and events for our website.</p> </li> <li> <p>Social Media: Utilize various social media platforms (Facebook and Instagram) to share updates, showcase your robot's progress, and engage with the community.</p> </li> </ul>"},{"location":"business/overview.html#team-outreach-and-community-engagement","title":"Team Outreach and Community Engagement","text":"<p>Building strong connections within our community is not only fulfilling but also opens up opportunities for collaboration and support:</p> <ul> <li> <p>STEM Education Initiatives: Organizing workshops, demonstrations, and/or mentorship programs to promote interest in science and technology among local students.</p> </li> <li> <p>Community Events: Participate in local events and volunteer activities to raise awareness about STEM.</p> </li> </ul>"},{"location":"business/communication/emails.html","title":"Emails","text":"<p>Email is one of the primary ways people communicate on Earth. Writing a good email is crucial to ensure that your message is conveyed clearly and effectively. Here are some fundamentals on how to write a good email:</p>"},{"location":"business/communication/emails.html#a-good-subject-line","title":"A good subject line","text":"<p>The subject line is the first thing someone gets to know about your email. A good subject line can make a person really want to view your email or delete it. Having a subject line that is clear, concise and straight to the point is very important.</p>"},{"location":"business/communication/emails.html#the-content","title":"The content","text":"<p>Don\u2019t write really long emails. Keep your content short and sweet and to the point, and make sure you get to the main point of your message early on. </p>"},{"location":"business/communication/emails.html#grammar-and-spelling","title":"Grammar and spelling","text":"<p>Using proper grammar and spelling is important in any form of communication, and email is no exception. Make sure you proofread your email before you send it, and use tools like spell check to catch any errors. Avoid using slang or overly casual language, and aim to use a tone that is professional but approachable.</p>"},{"location":"business/communication/emails.html#use-a-good-tone","title":"Use a good tone","text":"<p>The tone of your email is important and should match the context of your message. If you're sending an email to a business, aim for a tone that is friendly and professional.  But don\u2019t be way too professional to the point where you are wondering what you are even reading like cough cough ChatGPT. If you're sending an email to a fellow member or mentor, you can be more casual about it but still be professional and friendly.</p>"},{"location":"business/communication/emails.html#a-good-email-signature","title":"A good email signature","text":"<p>An email signature includes information about you and our team that the email receiver could find helpful for identifying and contacting us, as well as gaining insight to our team.</p> <p>Here is a good example of a good signature:</p> <pre><code>First Last\nRambots (FRC Team 2204)\nCalifornia Crosspoint Academy\nEmail: XXXXX@XXXXX.XXX\nWebsite: https://rambots.org/\nAddress: 25500 Industrial Blvd, Hayward, CA 94545\n</code></pre>"},{"location":"business/communication/emails.html#follow-up","title":"Follow Up","text":"<p>If you don't hear back from your recipient after a few days, it's okay to follow up with a polite email. Keep your follow-up email short and sweet, and restate your original request or question. Avoid coming across as pushy or demanding, and be patient if you don't receive a response right away.</p>"},{"location":"business/tools/ai/chatgpt.html","title":"ChatGPT","text":""},{"location":"business/tools/ai/chatgpt.html#chatgpt","title":"ChatGPT","text":"<p> ChatGPT is an AI large language model (LLM) designed by OpenAI that uses deep learning techniques to engage in natural language conversations and provide responses to a wide range of prompts and queries.</p>"},{"location":"business/tools/collaboration/discord.html","title":"Discord","text":""},{"location":"business/tools/collaboration/discord.html#discord","title":"Discord","text":"<p> Discord is a popular communication platform providing text, voice, and video chat channels for communities to interact and coordinate. We use Discord to communicate with each other.</p>"},{"location":"business/tools/collaboration/monday.com.html","title":"Monday.com","text":""},{"location":"business/tools/collaboration/monday.com.html#mondaycom","title":"Monday.com","text":"<p> Monday.com is a cloud-based work operating system that helps teams collaborate, manage tasks, and track project progress efficiently. Our team uses monday.com to manage tasks and collaborate efficently together.</p>"},{"location":"business/tools/collaboration/notion.html","title":"Notion","text":""},{"location":"business/tools/collaboration/notion.html#notion","title":"Notion","text":"<p> Notion is an all-in-one workspace application that integrates notes, tasks, databases, and collaboration tools to help users organize and manage their work and personal projects effectively. The business team has a dedicated Notion workspace to efficently collaborate together and to write documentation.</p>"},{"location":"business/tools/collaboration/office365.html","title":"Office365","text":""},{"location":"business/tools/collaboration/office365.html#microsoft-office-365","title":"Microsoft Office 365","text":"<p> Office 365 is a productivity suite offered by Microsoft that provides a comprehensive range of cloud-based applications and services for businesses and individuals, including popular tools like Word, Excel, PowerPoint, and Outlook. We use Office 365 to store files, and to communicate with each other.</p>"},{"location":"business/tools/graphic/photopea.html","title":"Photopea","text":""},{"location":"business/tools/graphic/photopea.html#photopea","title":"Photopea","text":"<p> Photopea is an advanced online image editing software that allows users to edit and manipulate images in a variety of formats with a Photoshop-like interface. It's basically a free clone of Photoshop that runs entirely on the web (and can work offline). Use this with uBlock Origin.</p>"},{"location":"design/overview.html","title":"Design Resources","text":""},{"location":"electrical/overview.html","title":"Electrical Overview","text":""},{"location":"electrical/safety/electrical-safety.html","title":"Electrical Safety","text":"<p>Electrical safety is very important because if you are not careful you could shock yourself which may cause mild harm or burns. To avoid getting shocked when working with electrical systems, always make sure that the system is turned off and the battery is unplugged. When the system is turned on, avoid any open wires and if there are any turn off the system and cover the wires because there should not be any exposed wires. Do not cut any live wires or do anything electrical while the robot is on. Do not connect the battery to itself as that would cause the battery to explode. In case someone heart stops due to an electric shock, call 911, preform chest compressions on that person and have someone get and use the AED (located near the central staircase).</p>"},{"location":"electrical/safety/robot-interaction.html","title":"Robot Interaction","text":"<p>Before interatcting with the robot you must make sure the the robot is first disabled and turned off. Make sure that any moving parts are secured and when turning on the robot, announce that the robot is being turned on.</p>"},{"location":"electrical/systems/electrical-diagrams.html","title":"Electrical Diagrams","text":"<p>A diagram of the two main electrical diagrams can be found below. The Rev Robotics diagram is listed above the CTRE Robotics diagram. These diagrams are also available on the WPILib website.  </p>"},{"location":"electrical/systems/power-distribution.html","title":"Power Distribution","text":"<p>The power distribution comes from the power distribution panel (PDH). The PDH takes power from the battery and distributes it to the other components of the robot.  </p>"},{"location":"electrical/theoretical/capacitors.html","title":"Capacitors","text":"<p>A capacitor is like a battery as they both hold and store electrical energy, but they work in different ways. Inside a capacitor the terminals connect two metal plates separated by a non-conducting material, or dielectric. The dielectric affects the type of capacitor and its function. The capacitors storage potential is measure in farads. A 1-farand capacitor can store 1 coulomb and can hold 1 amp-second of electrons at 1 volt.</p>"},{"location":"electrical/theoretical/current.html","title":"Current","text":"<p>Current is the rate at which electrons flow through a pint in an electrical circuit. In simplest terms, current = flow. The unit for current is an ampere or amp. 1 amp means that 1 coulomb of electrons (6.24 x 10^18 electrons) are moving past a single point in the circuit in 1 second. There are two types of current, direct current (dc) and alternating current (ac). Direct current only flows in one direction and is used in batteries or a dc generator. Alternating current flows in a sine wave pattern meaning that it reverses direction at regular intervals. AC current is used in household electronics powered by a wall outlet. Current can be measured using a multimeter.</p>"},{"location":"electrical/theoretical/diodes.html","title":"Diodes","text":"<p>A diode is a semiconductor that acts like a one-way switch for current, so it allows current to flow in one direction but stops current from flowing in the opposite direction. Diodes are also known as rectifiers because they can change alternating current into pulsating direct current. Diodes have polarity that is determined by an anode (positive) and a cathode (negative) and most diodes allow current to flow when positive voltage is applied to the anode. When a diode allows current to flow it is forward-biased and when it is reverse-biased it becomes an insulator. Credit: fluke.com</p>"},{"location":"electrical/theoretical/inductors.html","title":"Inductors","text":"<p>An inductor is an electromagnet. It is a coil of wire that creates a magnetic field when current start to flow through the wire. The coil can store energy and when the circuit is open current continues to flow from until the magnetic field collapses. It also opposes any change in the amount of current that flows through it. The capacity of the inductor is determined by the number of coils, the material that the coils are wrapped around, the cross-sectional are of the core, and the length of the coil.</p>"},{"location":"electrical/theoretical/microcontrollers.html","title":"Microcontrollers","text":"<p>A microcontroller is an integrated circuit is used for controlling other parts of an electrical system. A normal microcontroller usually has a processor, memory, and input/output peripherals on a single chip. Microcontrollers can be found in vehicles, robots, office machines and home appliances. They are like small personal computers and are designed to control small elements of a larger component without a complex operating system. </p>"},{"location":"electrical/theoretical/microcontrollers.html#_1","title":"Microcontrollers","text":"<p>Credits: https://www.techtarget.com/iotagenda/definition/microcontroller</p>"},{"location":"electrical/theoretical/microprocessors.html","title":"Microprocessors","text":"<p>A microprocessor is any type of miniature electronic device that has the arithmetic, logic and control circuitry needed to perform the functions of a digital computer\u2019s central processing unit (CPU). This type of integrated circuit can interpret and execute program instructions and handle arithmetic operations.</p>"},{"location":"electrical/theoretical/microprocessors.html#_1","title":"Microprocessors","text":"<p>Credit: https://www.britannica.com/technology/microprocessor</p>"},{"location":"electrical/theoretical/ohms-law.html","title":"Ohm's Law","text":"<p>Ohm\u2019s law is a formula used to calculate the relationship between voltage, current and resistance in a circuit. The formula is V=IR or voltage = amps x ohms. The formula is used to find voltage, current, or resistance when given the other two quantitates. Resistance = Voltage/Current, Current= Voltage/Resistance, Voltage= Current x Resistance</p>"},{"location":"electrical/theoretical/parallel-circuits.html","title":"Parallel Circuits","text":"<p>For a parallel circuit, all the electrical components share the same electrical nodes and the electrical path splits into different branches so that the current divides and part of it flows through each branch. The voltage is the same across all parallel components and the total current is the sum of all the current in the individual branches.</p>"},{"location":"electrical/theoretical/resistance.html","title":"Resistance","text":"<p>Electrical resistance measures how much an object reduces or opposes the electric current flowing through something. The unit for resistance is measure in ohms (\u03a9).</p>"},{"location":"electrical/theoretical/series-circuits.html","title":"Series Circuits","text":"<p>For a series circuit, all the components are connected to each other creating a single path for current to flow. The total resistance in a series circuit is the sum of all the resistors in the circuit. The total voltage drop is equal to the sum of all the individual voltage drops across those resistors.</p>"},{"location":"electrical/theoretical/series-parallel-circuits.html","title":"Series-Parallel Circuits","text":"<p>A series-parallel circuit contains elements of both series and parallel circuits. To find the total resistance of the series-parallel circuit, you find the total resistance for the parallel circuit first, then add all the resistances together to find the total resistance of the circuit.</p>"},{"location":"electrical/theoretical/transformers.html","title":"Transformers","text":"<p>A transformer is an electrical device that takes in a voltage and outputs a different voltage. It can either increase or decrease voltage. A transformer that increases voltage is called a step-up transformer and a transformer that decreased voltage is called a step-down transformer. A transformer works by using electromagnetic induction to change the voltage.</p>"},{"location":"electrical/theoretical/voltage.html","title":"Voltage","text":"<p>Voltage is the electric pressure or potential difference is the difference in electric potential between two points. Voltage is also the pressure from an electrical circuit\u2019s power source that pushes charged electrons or current though a circuit. The unit for voltage is the volt (V)!</p>"},{"location":"electrical/theoretical/wiring-gauges.html","title":"Wiring Gauges","text":"<p>Wire gages refers to the wires thickness. The thickness is measure by the American Wire Gauge, or AWG and the higher the number, the thinner the wire. So, a wire with 10 AWG will be thicker than a wire with 22 AWG and a wire with 1 AWG will be thicker than a wire with 10 AWG. The thickness determines how much current can safely go through the wire, The more amperage the device needs, the thicker the wire will be.</p>"},{"location":"fabrication/overview.html","title":"Fabrication Overview","text":""},{"location":"fabrication/hand-tools/calipers.html","title":"Calipers","text":"<p>Calipers are precision measuring tools used to determine the dimensions of an object with high accuracy. They consist of two arms or jaws, with one being movable, and a calibrated scale to read the measurement. Calipers are commonly used where precise measurements of length, diameter, and depth are required.</p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#using-calipers","title":"Using Calipers","text":""},{"location":"fabrication/hand-tools/calipers.html#holding-calipers-properly","title":"Holding Calipers Properly","text":"<p>While there are many ways of holding and handling calipers, the most common way is to hold the long part behind the display with your thumb on the knob as shown below. By spinning the knob, you can make precise adjustments. Be sure to always treat calipers with care as they are what you use to achieve precise measurements.</p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#caliper-functions","title":"Caliper Functions","text":""},{"location":"fabrication/hand-tools/calipers.html#zeroing-in-calipers","title":"Zeroing In Calipers","text":"<p>Before using calipers, it is a good practice to \"zero\" in the calipers to ensure the most accurate readings. First, you would close the jaws of the calipers and then press the \"Zero\" button. This will set the display to 0.</p> <p></p> Changing Units <p>When using digital calipers, you most commonly have the choice between using inches, or millimeters. You can change this by pressing unit button on the calipers.</p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#how-to-measure-using-calipers","title":"How to Measure using Calipers","text":""},{"location":"fabrication/hand-tools/calipers.html#external-measurements","title":"External Measurements","text":"<p>To take the measurements of the outside of an object, you would most commonly use the two jaws on the bottom. To get an accurate measurement, you would put your object between these jaws and clamp them together. No need to clamp tightly, just tight enough that it is not slipping. </p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#internal-measurements","title":"Internal Measurements","text":"<p>To get the measurements of the inside of an object, we would use the jaws most commonly located on the top of calipers. The way that you would achieve an accurate measurement is by opening them and pushing out, not too hard, but again tight enough so that it does not slip. </p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#depth-measurements","title":"Depth Measurements","text":"<p>To get the depth of something using a caliper, you would use the little \"stick\" that tends to protrude out the side of calipers to get the depth. You would set the end of the \"stick\" to the bottom of the depth that you are trying to measure and the bottom of the calipers to the top surface. </p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#locking-in-measurements","title":"Locking in Measurements","text":"<p>After getting your measurements, and you don't want to forget the measurement, you would turn the knob on the top clockwise to lock it in and counterclockwise to free your calipers back up.</p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#different-types-of-calipers","title":"Different Types of Calipers","text":""},{"location":"fabrication/hand-tools/calipers.html#digital-calipers","title":"Digital Calipers","text":"<p>The most common type of calipers today are digital calipers which tells you digitally on a screen what you have measured. </p> <p></p>"},{"location":"fabrication/hand-tools/calipers.html#vernier-calipers","title":"Vernier Calipers","text":"<p>Vernier calipers are calipers that tend to have a reading on it similar to a ruler.   You would need to know how to read these if you didn't have a digital caliper for some reason.</p> <p></p>"},{"location":"fabrication/hand-tools/chain-breakers.html","title":"Chain Breaks","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#parts-of-a-chain","title":"Parts of a Chain","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#outer-plate","title":"Outer Plate","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#inner-plate","title":"Inner Plate","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#roller","title":"Roller","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#pins","title":"Pins","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#chain-safety","title":"Chain Safety","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#how-to-use-chain-breaks","title":"How to Use Chain Breaks","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#placing-the-chain","title":"Placing the Chain","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#aligning-the-tool","title":"Aligning the Tool","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#applying-pressure","title":"Applying Pressure","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#breaking-the-link","title":"Breaking the Link","text":""},{"location":"fabrication/hand-tools/chain-breakers.html#when-breaking-the-chain-is-necessary","title":"When Breaking the Chain is Necessary","text":""},{"location":"fabrication/hand-tools/files.html","title":"Files","text":"<p>A file is a tool used to remove material from a piece and is not much different from sandpaper. You could think of files as metal sandpaper!</p> <p></p>"},{"location":"fabrication/hand-tools/files.html#uses-for-a-file","title":"Uses for a File","text":"<p>We mainly use files to debur long metal pieces after they have been laser cut. We would also use them to remove splinters from the end of a piece of wood. Files are useful for all sorts of things, but they aren't used as swords!</p>"},{"location":"fabrication/hand-tools/hammer.html","title":"Hammers","text":""},{"location":"fabrication/hand-tools/hammer.html#using-a-hammer","title":"Using A Hammer","text":"<p>Using a hammer may seem straight forward right? You swing and hit, but there is much more to it than just that. I will just barely scratch the surface on how to use a hammer and all the uses for a hammer. </p>"},{"location":"fabrication/hand-tools/hammer.html#saftey","title":"SAFTEY!","text":""},{"location":"fabrication/hand-tools/hammer.html#positioning","title":"Positioning","text":"<p>When you are holding a hammer, you want to be in a good position, not twisted or at a weird angle. Make sure you are in a position where your hands are holding onto the object, but not in the way of the strike. Keep your fingers safe!  </p>"},{"location":"fabrication/hand-tools/hammer.html#striking","title":"Striking","text":"<p>While striking, try to hit the head of the hammer with the object that you are attempting to hit whether that be a nail, or an object. Depending on the object, you may not need to put excessive force. Keep a firm grip on the handle of the hammer to make sure that it does not go flying. </p>"},{"location":"fabrication/hand-tools/hammer.html#how-to-use-hammers","title":"How to Use Hammers","text":""},{"location":"fabrication/hand-tools/hammer.html#holding-the-hammer","title":"Holding the Hammer","text":"<p>When holding a hammer, hold it close to the bottom of the handle, as you will get the most amount of power out of your swing. Hold it with a firm grip because flying hammers are not fun.</p>"},{"location":"fabrication/hand-tools/hammer.html#aiming-your-hammer","title":"Aiming your Hammer","text":"<p>When aiming for your object, you may tend to miss. If that is the case, you should slow down and reassess where the object is. From here, you should be able to hit the right place. </p>"},{"location":"fabrication/hand-tools/hammer.html#swinging-motion","title":"Swinging Motion","text":"<p>Swinging your hammer should not be a big swing. You just need to bring the hammer to where you have enough force to strike your object. </p>"},{"location":"fabrication/hand-tools/hammer.html#controlling-force","title":"Controlling Force","text":"<p>While swinging your hammer, you should get a feel of how much force you need to strike your object in the direction you want. If it is going in the wrong direction, move it in the opposite direction of where you want it to go. You'll know if your doing it right!</p>"},{"location":"fabrication/hand-tools/hammer.html#removal-of-nails","title":"Removal of Nails","text":"<p>To remove nails, use the claw part of the hammer and pry up. You may need to get in a better position to get more leverage.</p>"},{"location":"fabrication/hand-tools/hammer.html#mallets","title":"Mallets","text":"<p>Mallets are used to hit pieces that you do not want a indent in from the metal on metal contact. You would use a mallet the same way you would a hammer, but do not use a mallet to hit sharp objects. </p>"},{"location":"fabrication/hand-tools/hand-saws.html","title":"Hand Saws","text":"<p>Handsaws are saws you move with your hands. Instead of always using power-tools you can use your hands to saw!</p> <p></p>"},{"location":"fabrication/hand-tools/hand-saws.html#uses-for-hand-saws","title":"Uses for hand saws","text":"<p>You would need to use a handsaw when you need to cut a small part off of something, or if you need to make a cut inside. Using a handsaw may be important when the power goes out!</p>"},{"location":"fabrication/hand-tools/hex-keys.html","title":"Hex Keys","text":"<p>Hex Keys are exactly what they sound like... hex keys! They are used all over the robot in many different places, you just need to be on the lookout for them!</p> <p></p>"},{"location":"fabrication/hand-tools/hex-keys.html#uses-for-hex-keys","title":"Uses for Hex Keys","text":"<p>Hex Keys are used to turn bolts, as it is different from philips and star. You can think of it as another system of how to turn something. Using a hex key is simple. You find the right size key and turn with it!</p>"},{"location":"fabrication/hand-tools/knives.html","title":"Utility Knives","text":"<p>Knives are NOT weapons. Do not use them as weapons. Using them properly is key to not getting hurt. </p>"},{"location":"fabrication/hand-tools/knives.html#using-a-knife","title":"Using a Knife","text":"<p>Using a knife in robotics isn't used that often. Occasionally we will use them to open packages, cut something, but overall not used that often. When using a knife the most important thing to remember is to cut away from your body to avoid getting hurt!</p>"},{"location":"fabrication/hand-tools/levels.html","title":"Levels","text":"<p>\"Bubble levels,\" also known as spirit levels or bubble vials, are tools used to determine whether a surface is level or plumb (vertical). They contain a liquid-filled vial with an air bubble inside. When the bubble is centered between two reference lines in the vial, it indicates that the surface is level or plumb. </p>"},{"location":"fabrication/hand-tools/levels.html#using-a-level","title":"Using a Level","text":"<p>Bubble levels are useful to make sure a piece is straight when building things like field elements or making sure something is flat. To use a level, put it firmly against the object and move it until the bubble is in between the two lines. </p>"},{"location":"fabrication/hand-tools/marking-tools.html","title":"Marking Tools","text":"<p>Marking tools are instruments used to create visible indications on surfaces, objects, or materials for various purposes, such as measurement, identification, or guidance. These tools help ensure accuracy and consistency in tasks that require markings. </p>"},{"location":"fabrication/hand-tools/marking-tools.html#using-marking-tools","title":"Using Marking Tools","text":"<p>We at FRC use many different types of marking tools which include: - Pencils: Standard graphite pencils are used for marking on paper or wood surfaces due to their easily erasable marks.</p> <ul> <li> <p>Markers: Permanent markers or whiteboard markers are commonly used for labeling, sign-making, or writing on various surfaces.</p> </li> <li> <p>Scribes: Scribes or scratch awls create fine lines on materials like metal, wood, or leather, often used in woodworking and metalworking.</p> </li> <li> <p>Center Punch: A center punch is used to create a small indentation as a starting point for drilling or marking on metal surfaces.</p> </li> </ul>"},{"location":"fabrication/hand-tools/measuring-tools.html","title":"Measuring Tools","text":"<p>Measuring tools are instruments used to measure and assess dimensions, distances, angles, and other physical attributes accurately. These tools are essential for ensuring precision in various subteams and applications. </p>"},{"location":"fabrication/hand-tools/measuring-tools.html#using-measuring-tools","title":"Using Measuring Tools","text":"<p>In FRC, we use measuring tools everyday no matter what we are doing. Measuring tools are THE most important tool that we have in the shop! There are many different kinds, and they do drastically different things. - Rulers and Tape Measures: Rulers are flat tools with marked measurement units used for measuring lengths, while tape measures consist of a retractable tape for longer distances.</p> <ul> <li> <p>Calipers: Calipers come in various types (vernier, digital, dial) and are used to measure internal and external dimensions with high accuracy.</p> </li> <li> <p>Measuring Tape: A specialized tape used for taking measurements in construction, interior design, and various other applications.</p> </li> <li> <p>Protractors: Protractors measure angles between two lines or surfaces, important in geometry and various technical fields.</p> </li> </ul>"},{"location":"fabrication/hand-tools/pliers.html","title":"Pliers","text":"<p>\"Pliers\" are hand tools designed for gripping, bending, cutting, and manipulating materials. They consist of two pivoting jaws that can be used to hold objects firmly or to apply force. The jaws can vary in shape and function, with specialized pliers available for tasks such as cutting wires, holding pipes, crimping connectors, and shaping metal.  </p>"},{"location":"fabrication/hand-tools/pliers.html#using-pliers","title":"Using Pliers","text":"<p>Pliers are used most commonly in FRC to help hold, move and bend objects in tight spaces. There are many different types of pliers such as needle nose and flush cut pliers just to name a few. </p>"},{"location":"fabrication/hand-tools/punches.html","title":"Punches","text":""},{"location":"fabrication/hand-tools/punches.html#using-punches","title":"Using Punches","text":""},{"location":"fabrication/hand-tools/punches.html#proper-grip-and-handling","title":"Proper Grip and Handling","text":""},{"location":"fabrication/hand-tools/punches.html#punch-functions","title":"Punch Functions","text":""},{"location":"fabrication/hand-tools/punches.html#creating-precise-holes-and-indents","title":"Creating Precise Holes and Indents","text":""},{"location":"fabrication/hand-tools/punches.html#how-to-use-punches","title":"How to Use Punches","text":""},{"location":"fabrication/hand-tools/punches.html#holding-the-punch","title":"Holding the Punch","text":""},{"location":"fabrication/hand-tools/punches.html#aligning-with-the-mark","title":"Aligning with the Mark","text":""},{"location":"fabrication/hand-tools/punches.html#applying-controlled-force","title":"Applying Controlled Force","text":""},{"location":"fabrication/hand-tools/punches.html#techniques-for-different-types-of-punches","title":"Techniques for Different Types of Punches","text":""},{"location":"fabrication/hand-tools/punches.html#different-types-of-punches","title":"Different Types of Punches","text":""},{"location":"fabrication/hand-tools/punches.html#center-punches","title":"Center Punches","text":""},{"location":"fabrication/hand-tools/punches.html#drive-pin-punches","title":"Drive Pin Punches","text":""},{"location":"fabrication/hand-tools/punches.html#chisel-punches","title":"Chisel Punches","text":""},{"location":"fabrication/hand-tools/screwdriver.html","title":"Screwdrivers","text":"<p>Screwdrivers are handheld tools designed for turning screws, bolts, and other fasteners by applying torque. They consist of a handle and a shaft, often with a flat, Phillips, Flathead, Torx, or other types of tips that fit into corresponding screw head designs. Screwdrivers are essential in various tasks. Don't use the back of a screwdriver as a hammer though! </p>"},{"location":"fabrication/hand-tools/screwdriver.html#using-screwdrivers","title":"Using Screwdrivers","text":"<p>We at FRC use screwdrivers EVERY SINGLE DAY. No matter what the task is, it is a very high chance that you will encounter a screwdriver. Using a screwdriver is simple, choose the right driver, and turn it! As easy as that. </p>"},{"location":"fabrication/hand-tools/sockets.html","title":"Sockets","text":"<p>Sockets, often referred to as socket wrenches or ratchet wrenches, are versatile hand tools used to tighten or loosen fasteners like bolts and nuts. They are an essential part of many toolkits and are commonly used in automotive repairs, construction, maintenance, and other mechanical tasks.</p> <p></p>"},{"location":"fabrication/hand-tools/sockets.html#using-sockets","title":"Using Sockets","text":"<p>Sockets are very similar to screwdrivers, in the fact that you align the head to the \"hex\" and turn. Sockets are most commonly on the end of a ratchet which allows you to not twist your arm in an award position when moving the (usually) bolt. The clicking sound of the ratchet is very nice :)))</p>"},{"location":"fabrication/hand-tools/squares.html","title":"Squares","text":""},{"location":"fabrication/hand-tools/squares.html#using-squares","title":"Using Squares","text":""},{"location":"fabrication/hand-tools/squares.html#placement-and-alignment","title":"Placement and Alignment","text":""},{"location":"fabrication/hand-tools/squares.html#square-functions","title":"Square Functions","text":""},{"location":"fabrication/hand-tools/squares.html#checking-and-marking-right-angles","title":"Checking and Marking Right Angles","text":""},{"location":"fabrication/hand-tools/squares.html#how-to-use-squares","title":"How to Use Squares","text":""},{"location":"fabrication/hand-tools/squares.html#holding-the-square","title":"Holding the Square","text":""},{"location":"fabrication/hand-tools/squares.html#aligning-with-the-edge","title":"Aligning with the Edge","text":""},{"location":"fabrication/hand-tools/squares.html#marking-and-checking-right-angles","title":"Marking and Checking Right Angles","text":""},{"location":"fabrication/hand-tools/squares.html#different-types-of-squares","title":"Different Types of Squares","text":""},{"location":"fabrication/hand-tools/squares.html#combination-squares","title":"Combination Squares","text":""},{"location":"fabrication/hand-tools/squares.html#drywall-squares","title":"Drywall Squares","text":""},{"location":"fabrication/hand-tools/vises.html","title":"Vise","text":""},{"location":"fabrication/hand-tools/vises.html#using-a-vise","title":"Using a Vise","text":""},{"location":"fabrication/hand-tools/vises.html#proper-setup-and-clamping","title":"Proper Setup and Clamping","text":""},{"location":"fabrication/hand-tools/vises.html#vise-functions","title":"Vise Functions","text":""},{"location":"fabrication/hand-tools/vises.html#holding-and-securing-workpieces","title":"Holding and Securing Workpieces","text":""},{"location":"fabrication/hand-tools/vises.html#how-to-use-a-vise","title":"How to Use a Vise","text":""},{"location":"fabrication/hand-tools/vises.html#installing-the-workpiece","title":"Installing the Workpiece","text":""},{"location":"fabrication/hand-tools/vises.html#adjusting-the-jaws","title":"Adjusting the Jaws","text":""},{"location":"fabrication/hand-tools/vises.html#tightening-the-vise","title":"Tightening the Vise","text":""},{"location":"fabrication/hand-tools/vises.html#ensuring-stability","title":"Ensuring Stability","text":""},{"location":"fabrication/hand-tools/vises.html#different-types-of-vises","title":"Different Types of Vises","text":""},{"location":"fabrication/hand-tools/vises.html#bench-vises","title":"Bench Vises","text":""},{"location":"fabrication/hand-tools/vises.html#pipe-vises","title":"Pipe Vises","text":""},{"location":"fabrication/hand-tools/wrench.html","title":"Wrench","text":""},{"location":"fabrication/hand-tools/wrench.html#using-a-wrench","title":"Using a Wrench","text":""},{"location":"fabrication/hand-tools/wrench.html#proper-grip-and-handling","title":"Proper Grip and Handling","text":""},{"location":"fabrication/hand-tools/wrench.html#wrench-functions","title":"Wrench Functions","text":""},{"location":"fabrication/hand-tools/wrench.html#turning-and-tightening-bolts-and-nuts","title":"Turning and Tightening Bolts and Nuts","text":""},{"location":"fabrication/hand-tools/wrench.html#how-to-use-a-wrench","title":"How to Use a Wrench","text":""},{"location":"fabrication/hand-tools/wrench.html#holding-the-wrench","title":"Holding the Wrench","text":""},{"location":"fabrication/hand-tools/wrench.html#adjusting-the-jaw","title":"Adjusting the Jaw","text":""},{"location":"fabrication/hand-tools/wrench.html#choosing-the-right-wrench-size","title":"Choosing the Right Wrench Size","text":""},{"location":"fabrication/hand-tools/wrench.html#different-types-of-wrenches","title":"Different Types of Wrenches","text":""},{"location":"fabrication/hand-tools/wrench.html#adjustable-wrenches","title":"Adjustable Wrenches","text":""},{"location":"fabrication/hand-tools/wrench.html#combination-wrenches","title":"Combination Wrenches","text":""},{"location":"fabrication/manufacturing/3d-printer.html","title":"3D Printers","text":""},{"location":"fabrication/manufacturing/3d-printer.html#what-is-a-3d-printer","title":"What is a 3D Printer?","text":"<p>3D printing is always considered a form of additive manufacturing. A 3D printer creates a 3D object layer by layer only where material is needed. In doing this, you can make custom parts for exactly what you want. If you can design it, a 3D printer can make it. </p>"},{"location":"fabrication/manufacturing/3d-printer.html#why-use-a-3d-printer","title":"Why use a 3D Printer?","text":"<p>Using a 3D printer versus something like a Laser Cutter has its advantages. With a Laser Cutter, you are limited to the piece of material that you put in. But, if you are creating multiple flat objects, a Laser Cutter can do it faster, and more efficiently. Typically, when using a Laser Cutter, you also need an air filtration system, but with some materials in 3D Printing, you do not need a filtration system.</p>"},{"location":"fabrication/manufacturing/3d-printer.html#types-of-3d-printers","title":"Types of 3D Printers","text":""},{"location":"fabrication/manufacturing/3d-printer.html#fdm-fused-deposition-modeling","title":"FDM (Fused Deposition Modeling)","text":"<p>FDM or Fused Deposition Modeling is the most common form of 3D printing thanks to its ease of use and cost-effectiveness. FDM printing uses a strand of plastic which is melted and pushed through a nozzle to form your model. </p>"},{"location":"fabrication/manufacturing/3d-printer.html#sla-stereolithography","title":"SLA (Stereolithography)","text":"<p>SLA or Stereolithography is a resin based form of 3D printing. This uses a UV based resin and a screen to cure the resin in certain spots. Resin printing tends to have great detail and quality, but has toxic fumes, and must be cured in a light box after printing. </p>"},{"location":"fabrication/manufacturing/3d-printer.html#sls-selective-laser-sintering","title":"SLS (Selective Laser Sintering)","text":"<p>SLS or Selective Laser Sintering is a very expensive form of 3D printing which uses lasers and a powder which is melted to form your 3D model. With SLS, you can print with extremely advanced materials, and even metal. The cleanup tends to be a little messy, and due to its price is usually only used in enterprise applications. </p>"},{"location":"fabrication/manufacturing/3d-printer.html#common-types-of-filament-for-fdm","title":"Common Types of Filament for FDM","text":""},{"location":"fabrication/manufacturing/3d-printer.html#pla-polylactic-acid","title":"PLA (Polylactic Acid)","text":"<p>PLA or Polylactic Acid is a starch based filament, and is one of the most popular 3D printing filaments thanks to it not needing an enclosure, heated bed, and it not putting off toxic fumes. PLA has a glass transition temperature (around 65\u00b0C) which is the temperature where the material starts to deform. PLA prefers to be printed around 200\u00b0C. PLA is structurally strong, but deforms easily under pressures, and is not UV resistant. </p>"},{"location":"fabrication/manufacturing/3d-printer.html#pet-g-polyethylene-terephthalate-glycol","title":"PET-G (Polyethylene Terephthalate Glycol)","text":"<p>PET-G or Polyethylene Terephthalate Glycol is a polymer that is very similar to soda bottles. This is another popular 3D printing filament due it not needing an enclosure along with it not putting off toxic fumes. PET-G needs a heated bed. When printing PET-G on a glass bed, make sure to put glue stick down to help with release of the material. PET-G has a glass transition temperature of 85\u00b0C, and prefers to be printed around 245\u00b0C. PET-G tends to bend easier, but does not deform as easily as PLA. PET-G is UV resistant.</p>"},{"location":"fabrication/manufacturing/3d-printer.html#abs-acrylonitrile-butadiene-styrene","title":"ABS (Acrylonitrile Butadiene Styrene)","text":"<p>ABS or Acrylonitrile Butadiene Styrene is a very interesting type of 3D printing filament. ABS is once again popular for 3D printing, but nto as popular as PLA or PET-G because it requires an enclosure and puts off toxic fumes. ABS needs an enclosure, a heated bed, and a chamber filter to filter out the toxic fumes. ABS has a glass transition temperature of about 105\u00b0. ABS likes to be printed at 250\u00b0C. When printing with ABS, you parts will strink due to warping so take that into consideration when designing. </p>"},{"location":"fabrication/manufacturing/3d-printer.html#components","title":"Components","text":""},{"location":"fabrication/manufacturing/3d-printer.html#hotend","title":"Hotend","text":"<p>The hotend is the piece of a 3D printer that heats and extruders the molten filament onto the bed.</p> <p></p>"},{"location":"fabrication/manufacturing/3d-printer.html#extruder","title":"Extruder","text":"<p>The extruder is the piece of the 3D printer that pushes the filament into the hotend creating flow.</p> <p></p>"},{"location":"fabrication/manufacturing/3d-printer.html#bed","title":"Bed","text":"<p>The bed is where the molten filament sits and \"lives\" until you take it off the bed. This bed is typically heated to help the filament really stick down. There is typically a steel plate with a coating that magnetically attaches to the bed to help with removal. The most common type is Textured PEI. Another alternative to a steel plate is a glass bed. When using a glass bed, be sure to put some glue stick down to help with removal of the print.</p> <p></p>"},{"location":"fabrication/manufacturing/3d-printer.html#when-we-use-3d-printers","title":"When we use 3D Printers","text":"<p>We use 3D printers to maker complex and intricate parts that can only be achieved by 3D printing. We also use this to make replacement part for tools, use them as templates, and use them as parts on our robot. An example of this is on our 2023 robot as shown below:</p> <p></p>"},{"location":"fabrication/manufacturing/3d-printer.html#getting-started","title":"Getting Started","text":""},{"location":"fabrication/manufacturing/3d-printer.html#bambu-labs","title":"Bambu Labs","text":"<p>The printers that we most commonly use are Bambu Lab's 3D printers. They have disrupted the 3D printing market with their consumer level and prosumer Core XY 3D printers. We use these printers because they are cheap (relativly speaking), dimensionally accurate, and print SUPER fast (if you didn't know, 3D printing is typically VERY VERY slow). Needless to say, these printers achieve everything we want it to, and that is why we use them. </p>"},{"location":"fabrication/manufacturing/3d-printer.html#bambu-studio","title":"Bambu Studio","text":"<p>First, you will need to head to https://bambulab.com/en/download/studio to download the latest version of Bambu Studio for your platform. After doing this, you will need to launch it.</p> <p>To import your STL to Bambu Studio, you will need to click the cube with a little plus as indicated below </p> <p>After doing this, you will be asked to select your STL, which it will then open. </p> <p>From here, you can select your infill, support, and quality settings.  </p> <p>If you look to the top of the model, you should see a bar which will let you turn, move, and paint your supports onto your model.  </p> <p>After selecting all your settings, you will need to hit Slice Plate which will turn your model into a bunch of code (G-Code)  the printer to move to a certain place on certain layers.  </p> <p>Now, you will want to look at the sliced model, and look for areas that may need support. </p> <p>After comfirming that the model is ready to print, you will need to press print on the top right.  </p> <p>Finally, a screen will pop up, prompting you to send it to the printer. Click \"Send\", and you have successfully send off your first 3D print.  </p>"},{"location":"fabrication/power-tools/circular-saws.html","title":"Circular Saws","text":"<p>A circular saw is a versatile power tool used for making straight cuts in various materials such as wood, plywood, and plastic. This document provides step-by-step instructions on how to safely and effectively operate a circular saw.</p>"},{"location":"fabrication/power-tools/circular-saws.html#safety-precautions","title":"Safety Precautions","text":"<ul> <li>Always wear appropriate personal protective equipment (PPE), including safety goggles, ear protection, and a dust mask if necessary.</li> <li>Ensure the work area is well-lit and free from clutter.</li> <li>Keep your hands, fingers, and loose clothing away from the rotating blade and moving parts.</li> <li>Use clamps or a workpiece support to secure the material being cut.</li> <li>Be cautious of sharp edges and hot surfaces.</li> </ul> <p>2. Components of a Circular Saw</p> <ul> <li>Base Plate: Provides stability and support for the circular saw.</li> <li>Blade Guard: Covers the blade when not in use and retracts during cutting.</li> <li>Depth Adjustment: Sets the cutting depth of the blade.</li> <li>Bevel Adjustment: Adjusts the bevel angle for angled cuts.</li> <li>Trigger: Used to start and stop the blade rotation.</li> <li>Blade: The cutting tool that rotates to make the cuts.</li> </ul> <p></p> <p>3. Blade Selection</p> <ul> <li>Choose the appropriate blade based on the material being cut (wood, plywood, plastic, etc.).</li> <li>Ensure the blade is compatible with the circular saw's arbor size and speed rating.</li> <li>Install and securely tighten the blade on the circular saw's arbor.</li> </ul> <p>4. Basic Operating Procedures</p> <ul> <li>Position the circular saw on a stable and level surface.</li> <li>Adjust the depth of cut to match the thickness of the material being cut.</li> <li>Measure and mark the workpiece according to your desired cut.</li> <li>Place the workpiece on a stable support surface with the cut line clear of obstructions.</li> <li>Hold the circular saw firmly with one hand on the handle and the other hand on the trigger.</li> <li>Align the blade with the cut line and position the front edge of the base plate against the workpiece.</li> <li>Activate the trigger to start the blade rotation.</li> <li>Slowly lower the blade onto the workpiece, following the cut line.</li> <li>Maintain a steady and controlled feed rate throughout the cut.</li> <li>Once the cut is complete, release the trigger and allow the blade to come to a complete stop before moving the saw away from the workpiece.</li> </ul> <p>5. Cutting Techniques</p> <ul> <li>For straight cuts, align the blade with the cut line and keep the base plate flush against a guide or straight edge.</li> <li>For angled cuts, adjust the bevel angle of the circular saw according to the desired angle and align the blade with the cut line.</li> </ul> <p>6. Maintenance and Safety Checks</p> <ul> <li>Inspect the power cord or battery pack for any damage or signs of wear.</li> <li>Regularly check the blade for sharpness, alignment, and any signs of damage or dullness. Replace the blade if necessary.</li> <li>Lubricate the moving parts, such as the depth adjustment and bevel adjustment mechanisms, as recommended by the manufacturer.</li> <li>Store the circular saw in a dry and secure location, preferably in a designated storage area or case.</li> </ul> <p>7. Troubleshooting</p> <ul> <li>Blade Binding: If the blade binds during a cut, release the trigger immediately and remove the saw from the workpiece.</li> </ul> <p>Danger</p> <p>Failure to do so can result in serious or lethal injury</p> <ul> <li>Inaccurate Cuts: Ensure the base plate is properly aligned with the cut line and the blade is sharp and in good condition.</li> </ul> <p>Conclusion</p> <p>By following the guidelines outlined in this circular saw usage guide, you can safely and effectively use this powerful tool for making straight cuts in various materials. Remember to prioritize safety, select the appropriate blade for the material, and perform regular maintenance to keep the circular saw in good working condition. Happy cutting!</p>"},{"location":"fabrication/power-tools/drill-presses.html","title":"Drill Presses","text":""},{"location":"fabrication/power-tools/drill-presses.html#introduction","title":"Introduction:","text":"<p>A drill press is a powerful tool used for drilling precise holes in various materials such as wood, metal, and plastic. This document provides instructions on how to safely and effectively operate a drill press.</p> <p>1. Safety Precautions</p> <ul> <li>Always wear appropriate personal protective equipment (PPE), including safety goggles.</li> <li>Ensure the work area is well-lit and free from clutter to prevent accidents.</li> <li>Securely clamp the workpiece to the drill press table or use a vise to hold it in place.</li> <li>Keep your hands, fingers, hair, and loose clothing away from the rotating drill bit and other moving parts.</li> <li>Never force the drill press or apply excessive pressure.</li> <li>Use the appropriate drill bit for the material being drilled.</li> <li>Be cautious of sharp edges and hot surfaces after drilling.</li> </ul> <p>2. Components of a Drill Press</p> <ul> <li>Motor: Powers the drill press.</li> <li>Drill Chuck: Holds the drill bit securely in place.</li> <li>Chuck Key: Use this to tighten the chuck in place.</li> <li>Spindle: Rotates the drill bit.</li> <li>Quill: Moves up and down, allowing the drill bit to penetrate the material.</li> <li>Depth Stop: Sets the desired drilling depth.</li> <li>Table: Supports the workpiece and can be adjusted vertically and horizontally.</li> <li>Column: Vertical support structure that connects the base and head of the drill press.</li> <li>Saftey Switch: This is a piece of plastic that is needed to turn on the drill press.</li> </ul> <p>Do not lose the safety switch and remove after use.</p> <p></p> <p>3. Drill Bit Selection</p> <ul> <li>Choose the appropriate drill bit based on the material to be drilled (wood, metal, plastic, etc.).</li> <li>Match the drill bit size to the required hole diameter.</li> <li>Ensure the drill bit is compatible with the drill press chuck (e.g., straight shank, tapered shank).</li> <li>Insert and securely tighten the drill bit in the drill chuck.</li> </ul> <p>4. Basic Operating Procedures</p> <ul> <li>Adjust the table height and position to align the drill bit with the desired drilling location on the workpiece.</li> <li>Hold the workpiece securely against the table or in a vise with clamps.</li> <li>Lower the quill by rotating the feed handle or using the depth stop mechanism until the drill bit touches the workpiece.</li> <li>Apply moderate pressure to the feed handle to start the drilling process.</li> <li>Maintain a steady and controlled downward pressure as the drill bit penetrates the material.</li> <li>Once the desired depth is reached, release the pressure on the feed handle and raise the quill to its highest position.</li> <li>Turn off the drill press and wait for the drill bit to come to a complete stop before removing the workpiece.</li> <li>Note: When drilling into something like steel, make sure to use a center punch to prevent the drill bit from wobbling</li> </ul> <p>5. Advanced Techniques</p> <ul> <li>Drilling Multiple Holes: Use layout marks and indexing techniques to accurately drill multiple holes in a pattern or at specific intervals.</li> <li>Countersinking and Counterboring: Use specialized drill bits to create recesses for screws or create larger diameter holes with a flat bottom.</li> </ul> <p>6. Maintenance and Safety Checks</p> <ul> <li>Regularly clean the drill press, removing dust, debris, and chips from the table, chuck, and motor.</li> <li>Lubricate the moving parts, such as the quill and feed handle, according to the manufacturer's recommendations.</li> <li>Inspect the power cord and plug for any damage or fraying. If any damage is found, have it repaired or replaced by a qualified professional.</li> <li>Check the drill press chuck for any signs of wear or damage. Replace the chuck if necessary.</li> <li>Ensure all bolts, screws, and clamps are tightened securely before operating the drill press.</li> <li>Store the drill press in a clean, dry, and secure location when not in use.</li> <li>Periodically check the drill press for any loose or misaligned parts. If any issues are detected, consult the manufacturer or a professional for repairs.</li> </ul> <p>7. Troubleshooting</p> <ul> <li>Drill Bit Slippage: Ensure the drill bit is securely tightened in the chuck. If slippage persists, inspect the chuck for wear or damage and replace if necessary.</li> <li>Excessive Vibration: Check for loose bolts or screws and tighten them if needed. If the issue persists, the drill bit may be damaged or improperly balanced. Replace the bit or seek professional advice.</li> <li>Motor Overheating: Allow the motor to cool down if it becomes excessively hot during prolonged use. If the problem persists, consult a professional for inspection and potential motor maintenance.</li> <li>Drill Bit Breakage: Ensure the drill bit is suitable for the material being drilled and not worn out. If breakage continues, inspect the drill press for alignment issues and consult a professional if needed.</li> </ul> <p>8. Conclusion</p> <p>By following the guidelines outlined in this documentation, you can safely and effectively use a drill press for a variety of drilling tasks. Remember to prioritize safety, select the appropriate drill bit for the material, and perform regular maintenance to keep the drill press in good working condition. You should use a drill press over a regular drill when you want to create precise 90\u00b0 holes, or repetitive holes, as it is more efficient. Happy drilling!</p>"},{"location":"fabrication/power-tools/drills.html","title":"Drills","text":""},{"location":"fabrication/power-tools/drills.html#introduction","title":"Introduction:","text":"<p>Power drills are an essential tool in robotics , enabling the team to drill holes, drive screws, and perform other tasks efficiently. By following the guidelines outlined in this document, team members can minimize the risk of accidents and maximize productivity.</p> <p>1. Safety Precautions - Always wear personal protective equipment (PPE), including safety goggles. - Ensure the work area is well-lit and free from clutter. - Securely clamp the workpiece to prevent movement during drilling. - Keep fingers, hair, and loose clothing away from moving parts. - Never force the drill or use excessive pressure. - Use the appropriate drill bit for the material being drilled. - Be cautious of sharp edges and hot surfaces bits</p> <p>2. Components of a Power Drill - Power trigger: Used to control the speed of the drill. The speed of the drill is compliant with how hard the trigger is pulled - Chuck: The part that holds the drill bit in place. - Forward/reverse switch: Allows for clockwise and counterclockwise rotation. - Handle: Provides a firm grip and control during operation. - Battery pack or power cord: Supplies power to the drill. - Torque Ring: This is located right behind the chuck, and is used to control the amount of torque on the object you're screwing. This is not used when drilling holes. </p> <p></p> <p>Please note that we have a Makita Drill</p> <p>3. Drill Bit Selection - Choose the appropriate drill bit based on the material to be drilled (wood, metal, plastic, etc.). - For larger holes, use spade bits or hole saws. - Select a bit size that matches the required hole diameter. - Ensure the drill bit is securely tightened in the chuck before use.</p> <p>4. Basic Operating Procedures - Insert the fully charged battery pack or connect the drill to a power source. - Hold the drill securely with one hand on the handle and the other hand on the top of the drill. - Align the drill bit with the desired drilling location. - Apply steady pressure downwards to the drill and activate the power trigger gradually. - Allow the drill bit to cut at its own pace without forcing it. - To stop drilling, release the power trigger.</p> <p>5. Drilling Techniques - Mark the drilling point with a center punch (when drilling metal) or pencil (when drilling wood) to provide an accurate starting point. - Use a smaller pilot hole before drilling larger holes to prevent the bit from wandering. - Start drilling at a slow speed, gradually increasing the speed as the hole deepens. - Avoid drilling through multiple layers of material without proper support.</p> <p>6. Screwdriving Techniques - Select a bit that matches the screw head type and size. - Insert the screwdriver bit securely into the chuck. - Adjust the drill's speed to a lower setting for better control. - Apply steady pressure while driving the screw, being careful not to overtighten and strip the threads. - Use a pilot hole when using screws near the edge of the material.</p> <p>7. Maintenance and Storage - Clean the drill and chuck after each use to remove debris. - Inspect the power cord or battery pack for any damage. - Store the drill in a dry and secure location, preferably in a case - Regularly check and replace worn-out drill bits.</p> <p>8. Troubleshooting</p> <p>Problem: Drill bit gets stuck or won't release from the chuck. Solution: Ensure the drill is turned off, then turn the chuck to loosen or tighten the chuck. </p> <p>Problem: Drill bit is wobbling during drilling. Solution: Check that the drill bit is securely tightened in the chuck. If the wobbling persists, the bit may be damaged and should be replaced. Ask a mentor for their recommendation.</p> <p>Problem: Drill loses power or stops working. Solution: Check the power source or battery pack for proper connection and charge. If the issue persists, consult a mentor for their advice.</p> <p>9. Conclusion</p> <p>By following the guidelines outlined in this power drill usage guide, our robotics team members can safely and effectively utilize this essential tool. Remember to prioritize safety, select the appropriate drill bit for the material being worked on. Remember to put the drill back where you found it. The power drill is a very versitile tool that you can use to make holes and screw in screws anywhere. Happy drilling!</p>"},{"location":"fabrication/power-tools/impact-drivers.html","title":"Impact Drivers","text":""},{"location":"fabrication/power-tools/impact-drivers.html#introduction","title":"Introduction:","text":"<p>An impact driver is a versatile power tool that is primarily used for driving screws, bolts, and fasteners. This document provides step-by-step instructions on how to safely and effectively operate an impact driver.</p> <p>1. Safety Precautions</p> <ul> <li>Always wear appropriate personal protective equipment (PPE), including safety goggles, etc.</li> <li>Ensure the work area is well-lit and free from clutter.</li> <li>Keep your hands, fingers, hair, and loose clothing away from the rotating chuck and moving parts.</li> <li>Use the appropriate screwdriver bit or socket for the fastener being driven.</li> <li>Be cautious of sharp edges and hot surfaces.</li> <li>Do not apply excessive force or pressure on the impact driver.</li> </ul> <p>2. Components of an Impact Driver</p> <ul> <li>Power trigger: Used to control the speed and power of the impact driver.</li> <li>Chuck: The part that holds the screwdriver bit or socket in place. Unlike a normal drill chuck, instead of rotating it, you need to pull forward to release the bit.</li> <li>Forward/reverse switch: Allows for clockwise and counterclockwise rotation.</li> <li>Handle: Provides a firm grip and control during operation.</li> <li>Battery pack: Supplies power to the impact driver. </li> </ul> <p>3. Bit or Socket Selection</p> <ul> <li>Choose the appropriate screwdriver bit or socket based on the type and size of the fastener.</li> <li>Ensure the bit or socket is securely inserted and locked into the chuck.</li> </ul> <p>4. Basic Operating Procedures</p> <ul> <li>Insert a fully charged battery pack.</li> <li>Hold the impact driver securely with one hand on the handle and the other hand on the top of the tool.</li> <li>Align the screwdriver bit or socket with the fastener.</li> <li>Apply moderate pressure on the screw or fastener to ensure proper engagement.</li> <li>Pull the power trigger gradually to start driving the fastener.</li> <li>Allow the impact driver to do the work. The impacting action will help drive the fastener more effectively.</li> <li>To stop driving, release the power trigger.</li> </ul> <p>5. Driving Techniques</p> <ul> <li>Use a pilot hole when driving screws into wood to prevent splitting.</li> <li>Adjust the speed and power settings on the impact driver based on the material and size of the fastener.</li> <li>Hold the impact driver at a perpendicular angle to the work surface for optimal driving force.</li> <li>Apply consistent pressure while driving the fastener, but avoid overtightening to prevent damage.</li> </ul> <p>6. Maintenance and Storage</p> <ul> <li>Clean the impact driver after each use to remove dust and debris.</li> <li>Store the impact driver in a dry and secure location, preferably in a case or toolbox.</li> <li>Regularly check and replace worn-out screwdriver bits or sockets.</li> </ul> <p>7. Troubleshooting</p> <ul> <li>Chuck Jamming: If the chuck gets jammed, release the power trigger and try loosening or tightening the chuck to release the bit or socket. If this doesn\u2019t work, consult a mentor.</li> <li>Loss of Power: Check the power source or battery pack for proper connection and charge. If the issue persists, consult a mentor.</li> </ul> <p>Conclusion</p> <p>By following the guidelines outlined in this impact driver usage guide, you can safely and effectively use this powerful tool for driving screws and fasteners. Remember to prioritize safety, select the appropriate bit or socket for the fastener, and perform regular maintenance to keep the impact driver in good working condition. Happy driving!</p>"},{"location":"fabrication/power-tools/miter-saws.html","title":"Miter Saws","text":""},{"location":"fabrication/power-tools/miter-saws.html#introduction","title":"Introduction:","text":"<p>A miter saw is a versatile power tool used for making accurate crosscuts and angled cuts in various materials such as wood, plastic, and metal. This documentation provides step-by-step instructions on how to safely and effectively operate a miter saw.</p> <p>1. Safety Precautions</p> <ul> <li>Always wear appropriate personal protective equipment (PPE), including safety goggles, ear protection, and a dust mask if preferred.</li> <li>Ensure the work area is well-lit and free from clutter.</li> <li>Keep your hands, fingers, and loose clothing away from the rotating blade and moving parts.</li> <li>Use a workpiece clamp or hold-down to secure the material being cut.</li> <li>Disconnect the power source before changing blades or performing maintenance.</li> <li>Be cautious of sharp edges and hot surfaces.</li> <li>Before starting the miter saw, you NEED mentor supervision, and you must say loud and clear \u201cI AM USING THE MITER SAW\u201d before starting the saw.</li> </ul> <p>2. Components of a Miter Saw</p> <ul> <li>Base: Provides stability and support for the miter saw.</li> <li>Blade: The cutting tool that rotates to make the cuts.</li> <li>Miter Scale: Indicates the angle at which the blade can be tilted left or right.</li> <li>Bevel Scale: Indicates the angle at which the blade can be tilted in relation to the base.</li> <li>Fence: Guides the workpiece and provides support during cutting.</li> <li>Trigger: Used to start and stop the blade rotation.</li> <li>Blade Guard: Protects the operator from coming into contact with the blade during operation.</li> </ul> <p></p> <p>3. Basic Operating Procedures</p> <ul> <li>Position the miter saw on a stable and level surface.</li> <li>Adjust the miter saw's bevel angle and miter angle to the desired settings for the cut.</li> <li>Measure and mark the workpiece according to your desired cut.</li> <li>Place the workpiece against the fence, aligning the cut mark with the blade.</li> <li>Hold the workpiece firmly against the fence and table. Clamp it to the miter saw if necessary.</li> <li>Lower the blade slowly and steadily onto the workpiece, not yet starting the blade following the cut line. This helps you ensure accuracy while cutting.</li> <li>Activate the trigger to start the blade rotation.</li> <li>Lower the blade slowly and steadily onto the workpiece, following the cut line.</li> <li>Maintain a consistent and controlled feed rate throughout the cut. Do not force the saw into the work piece, let the saw do the work.</li> <li>Once the cut is complete, release the trigger and allow the blade to come to a complete stop before moving the workpiece.</li> </ul> <p>4. Cutting Techniques</p> <ul> <li>For straight crosscuts, align the cut mark with the blade and keep the workpiece flush against the fence.</li> <li>For miter cuts, adjust the miter angle according to the desired angle and align the cut mark with the blade.</li> <li>For bevel cuts, adjust the bevel angle in addition to the miter angle to achieve the desired angle.</li> <li>When making repetitive cuts, use stop blocks or a miter saw stand with length stops for consistent and accurate results.</li> </ul> <p>5. Maintenance and Safety Checks</p> <ul> <li>Clean the miter saw after each use to remove dust and debris from the table, blade, and fence.</li> <li>Inspect the power cord for any damage or signs of wear.</li> <li>Regularly check the blade for sharpness, alignment, and any signs of damage or dullness.</li> <li>Replace the blade if necessary.</li> <li>Store the miter saw in a dry and secure location, preferably in a designated storage area.</li> </ul> <p>6. Troubleshooting</p> <ul> <li>Blade Binding: If the blade binds during a cut, release the trigger immediately and remove the workpiece. Ask a mentor for help.</li> <li>Inaccurate Cuts: Ensure the miter and bevel angles are set correctly. Check the blade for any damage or dullness. Make sure the workpiece is properly secured and held against the fence during cutting.</li> </ul>"},{"location":"fabrication/power-tools/miter-saws.html#conclusion","title":"Conclusion","text":"<p>By following the guidelines outlined in this miter saw usage guide, you can safely and effectively use this versatile tool for making precise crosscuts and angled cuts. Remember to prioritize safety, select the appropriate blade for the material, and perform regular maintenance to keep the miter saw in good working condition. Happy cutting!</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html","title":"Operating the Website","text":"<p>This website uses Markdown and Jekyll to format posts. Markdown is commonly used for formatting text on the web, and is used on websites such as Github, Reddit, Stack Overflow, and even Discord.</p> <p>Here's a quick overview of Markdown:</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#this-is-a-heading","title":"This is a heading","text":""},{"location":"leadership/website/2023-06-14-operating-the-website.html#this-is-a-subheading","title":"This is a subheading","text":""},{"location":"leadership/website/2023-06-14-operating-the-website.html#this-is-a-sub-subheading","title":"This is a sub-subheading","text":""},{"location":"leadership/website/2023-06-14-operating-the-website.html#this-is-a-sub-sub-subheading","title":"This is a sub-sub-subheading","text":"<p>This is a paragraph. You can even make text bold or italic.</p> <pre><code>print(\"I can even add code blocks!\")\n</code></pre> <p>Here's a link to Google. Here's a picture of the dino from the game : {% endhighlight %} </p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#github","title":"Github","text":"<p>This website is hosted on Github Pages, which is a free service that allows you to host static websites.  This means that edits on the repository will be reflected on the website. You should familiarize yourself with terms such as <code>commit</code>, <code>pull request</code>, and <code>merge</code> before making any changes to the website.</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#posts","title":"Posts","text":"<p>In order to post a new blog post, create a new file in the <code>_posts</code> directory. Jekyll requires blog post files to be named according to the following format:</p> <p><code>YEAR-MONTH-DAY-title.md</code></p> <p>Where <code>YEAR</code> is a four-digit number, <code>MONTH</code> and <code>DAY</code> are both two-digit numbers, and <code>md</code> is the file extension  representing the format used in the file (markdown). After that, include the necessary front matter. Here's an example:</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#highlight-markdown","title":"{% highlight markdown %}","text":"<p>layout: post title:  \"Operating the Website\" date:   2023-06-14 15:46:38 -0700 categories: team author: James Ding</p> <p>{% endhighlight %}</p> <p>Front matter tells Jekyll basic information about any page. As you can see here, a post only requires a <code>layout</code>,  <code>title</code>, <code>date</code>, <code>categories</code>, and <code>author</code>. </p> Front Matter Description <code>layout</code> The layout to use for the page. This is usually <code>post</code> for blog posts. <code>title</code> The title of the page. <code>date</code> The date the page was published. Military time (24H format), <code>YYYY-MM-DD HH:MM:SS ZONE</code> format <code>categories</code> The category of the post. In most cases, it will be <code>team</code>, <code>mentor</code>, <code>sponsor</code>, or <code>newsletter</code>. <code>author</code> The author of the post. <p>Note: A common solution to articles not showing up on the website is to check the date. If the date is in the future, the article will not show up on the website.</p> <p>Take a look at the source for this post to get an idea about how it works.</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#updating-content","title":"Updating Content","text":"<p>Updating content on the website is pretty straight forward. Generally, you would want to release updates every season on sponsors, resources, and media.</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#updating-sponsors","title":"Updating Sponsors","text":"<p>To update sponsors, edit the <code>sponsors.md</code> file in the root directory. The file is formatted in Markdown, but includes special elements known as <code>includes</code>.</p> <p>Think about includes as a special function that takes in parameters and outputs HTML. In most cases to display sponsors, you would need the image, name, description, and link to the sponsor. </p> <p>Here's an example of an include: {% highlight html %} {% raw %}{% include gold-ram-sponsor.html name=\"BAE Systems\" img_url=\"/assets/sponsors/bae.svg\" content=\"BAE Systems is a global defense, aerospace, and security company that provides advanced technology and services to customers worldwide.\" url=\"https://www.baesystems.com/\" %}{% endraw %}</p> <p>Notice how the arguments, <code>name</code>, <code>img_url</code>, <code>content</code>, and <code>url</code> are all passed in as parameters.</p> Parameter Description <code>name</code> The name of the sponsor <code>img_url</code> The URL to the image of the sponsor <code>content</code> The description of the sponsor <code>url</code> The URL to the sponsor's website <p>In order to get the sponsor's image to show properly, place image files (<code>PNG</code>, <code>JPG</code>, <code>JPEG</code>, <code>SVG</code>) in the <code>assets/sponsors</code>  folder. Other than that, you should be good to go!</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#updating-members","title":"Updating Members","text":"<p>Updating members is a slightly more complicated and time consuming process. In order to update members, you need to edit individual markdown files in the <code>_mentors</code>, <code>_leadership</code>, <code>_members</code>, and <code>_alumni</code> directories.</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#mentors","title":"Mentors","text":"<p>Mentors have the following attributes. Note that most attributes are optional, but it is recommended to fill out as much as possible.</p> Front Matter Description <code>profile_pic</code> URL or path to the picture of a mentor. If not specified, the default avatar will be used <code>name</code> The name of the mentor (required) <code>position</code> The position of the mentor (job or team) <code>job</code> The company the mentor works at <code>email</code> The mentor's email address <code>year_started</code> The year the mentor started mentoring the team <code>year_ended</code> The year the mentor stopped mentoring the team <code>tags</code> A list of tags that describe which skills a mentor is familiar with <p>The content after the front matter is the mentor's biography. This is just standard Markdown.</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#leadership-members","title":"Leadership &amp; Members","text":"<p>Leadership and members have the following attributes. Note that most attributes are optional, but it is recommended to fill out as much as possible.</p> Front Matter Description <code>profile_pic</code> URL or path to the picture of a leadership member. If not specified, the default avatar will be used <code>name</code> The name of the leadership/member (required) <code>role</code> The role of the leadership/member within the team <code>graduation_year</code> The year the leadership/member will graduate (required) <code>year_started</code> The year the leadership/member joined the team <code>year_ended</code> The year the leadership/member left the team <code>email</code> The email of the leadership/member <code>tags</code> A list of tags that describe which skills a leadership/member is familiar with. For leadership, there is the option of <code>CORE</code>, for core leadership position. <p>The content after the front matter is the leadership/member's biography. This is just standard Markdown. This is truncated at {{ site.member_bio_length }} characters.</p>"},{"location":"leadership/website/2023-06-14-operating-the-website.html#alumni","title":"Alumni","text":"<p>Alumni have the following attributes. Note that most attributes are optional, but it is recommended to fill out as much as possible.</p> Front Matter Description <code>profile_pic</code> URL or path to the picture of the alumni. If not specified, the default avatar will be used <code>name</code> The name of the alumni (required) <code>major</code> The major of the alumni <code>college</code> The college the alumni attended <code>graduation_year</code> The year the alumni graduated <code>roles</code> A list of roles the alumni had within the team <p>The content after the front matter is the alumni's biography. This is just standard Markdown. This is truncated at {{ site.member_bio_length }} characters.</p>"},{"location":"programming/networking.html","title":"Networking","text":"<p>Networking refers to the communication between two or more computers and devices. This document will cover the basics of networking, how it works, and it's applications in the world and FIRST.</p>"},{"location":"programming/networking.html#ip-addresses","title":"IP Addresses","text":"<p>An IP address is a unique set of numbers and dots that identifies each device connected to a network. It's like a home address, but for computers, smartphones, or robots. For example, if I wanted to send a letter to my friend, I would need to know their address. If I wanted to send a message to a computer, I would need to know its IP address.</p>"},{"location":"programming/networking.html#ipv4","title":"IPv4","text":"<p>IPv4 refers to the 4th version of the Internet Protocol. It is the most common version of IP addresses, and is the version that is supported by FIRST. </p> <p>IP addresses are comprised of 4 sections (known as octets), with each section being a number from 0-255.</p> Why is the number range 0-255? <p>The number range is 0-255 because each section is 8 bits (or one byte), and 8 bits can represent 256 numbers (0-255).</p> <p>If you do the calculations, you'll find that there are $2^{32}$ or $4,294,967,296$ possible IPv4 addresses.</p> <p>Unfortunately, this is a problem because there are more than 4 billion devices connected to the internet. This means that there are not enough IPv4 addresses for every device to have a unique address. How can we solve this problem? Well, we can use  IPv6, or turn to the use of private IP addresses.</p>"},{"location":"programming/networking.html#public-vs-private-ip-addresses","title":"Public vs. Private IP Addresses","text":""},{"location":"programming/networking.html#network-classes","title":"Network Classes","text":""},{"location":"programming/overview.html","title":"Programming Resources","text":"<p>Welcome to the programming resources page!</p> <p>Before we dive in, we want to make one thing clear: the pace and content of this course is more rigorous than any computer science course offered at this school. It's completely normal to encounter obstacles or feel uncertain about certain topics. Our seasoned Programming team members are here to help, so don't hesitate to ask us any questions you may have!</p> <p>This material can be challenging to understand, the exposure alone opens the doors for more advanced concepts which you may pursue in the future.</p>"},{"location":"programming/overview.html#overview","title":"Overview","text":"<p>During pre-season, our team goes over all the required programming concepts in a series of workshops. These workshops are designed to be accessible to everyone, regardless of prior programming experience.</p>"},{"location":"programming/overview.html#languages-and-tools","title":"Languages and Tools","text":"<p> Kotlin is our team's primary programming language. It is a modern, statically typed language developed by Jetbrains that is interoperable with Java libraries by WPILib.</p> <p> IntelliJ IDEA is our team's primary Integrated Development Environment. It is a powerful IDE developed by Jetbrains that supports Kotlin and Java.</p>"},{"location":"programming/overview.html#content-covered","title":"Content Covered","text":""},{"location":"programming/overview.html#programming-fundamentals","title":"Programming Fundamentals","text":"Variables, Conditionals, Control Flow, Loops, Functions, Collections <p>Info</p> <p>Intro to Computer Science covers up to these concepts. If you have taken ICS, you should be familiar with up to these concepts.</p>"},{"location":"programming/overview.html#object-oriented-programming-oop","title":"Object-Oriented Programming (OOP)","text":"Classes, Inheritance, Abstraction, Polymorphism, Encapsulation, Interfaces, Access Modifiers, Static vs. Instance, Data Classes and Data Structures <p>Info</p> <p>Object-Oriented Programming is typically where AP Computer Science A ends. If you have taken APCS or equivalent, you should be familiar with up to these concepts.</p>"},{"location":"programming/overview.html#wpi-library","title":"WPI Library","text":"Robot, Subsystems, Commands, Sensors, Motors, Controllers, Event-Based Programming, Command-Based Programming, Phoenix API, CTRE API <p>Tip</p> <p>This is section contains knowledge that is specific to FRC. That being said, we expect all members of the programming team attend these workshops, regardless of prior experience.</p>"},{"location":"programming/overview.html#version-control","title":"Version Control","text":"Git, Git Collaboration, GitHub, Development Workflows"},{"location":"programming/overview.html#advanced-topics","title":"Advanced Topics","text":"Proportional-Integral-Derivative (PID) Control, Inverse Kinematics, Motion Profiling, Path Planning, Vision Processing, Testing, Debugging, Logging, Unit Testing, Continuous Integration (CI), Continuous Deployment (CD) <p>Question</p> <p>Topics in this section are optional and are not required to be a part of the Programming team. However, they are highly recommended if you are interesting in the theory behind robotics programming as well as leadership positions on the Programming team.</p>"},{"location":"programming/overview.html#help-im-stuck","title":"Help, I'm Stuck!","text":"<p>If your stuck, don't worry! We've all been there. Here are some resources that you can use to help you out:</p> <ul> <li>Chief Delphi is a forum for all things specific to FRC. </li> <li>Stack Overflow is a forum for all things programming (coding, debugging, etc.). Chances are, if you have a question or meet a weird bug, someone else has asked about it.</li> <li>Google is your friend. If you have a question, chances are someone else has asked it before. If you have an error, chances are someone else has encountered it before. If you have a problem, chances are someone else has solved it before. If you have a question, error, or problem, Google it.</li> <li>ChatGPT or Bard are a LLMs that can answer questions, generate code, and even help debug. It's not perfect, but it's pretty good at answering questions about programming, as well as explaining concepts.</li> </ul>"},{"location":"programming/overview.html#credits","title":"Credits","text":"<ul> <li>COMPSCI 61A: Structure and Interpretation of Computer Programs</li> <li>Structure and Interpretation of Computer Programs, 2nd ed.</li> <li>Composing Programs</li> <li>Kotlin Documentation</li> <li>GitHub Documentation</li> <li>Atlassian Git Tutorials</li> <li>IDEA Documentation</li> <li>COMPSCI 61B: Data Structures and Programming Methodology</li> </ul>"},{"location":"programming/kotlin/fundamentals/collections.html","title":"Collections","text":""},{"location":"programming/kotlin/fundamentals/collections.html#collection-iterable-interface","title":"Collection &amp; Iterable Interface","text":"<p>Collections store a number of objects of the same type. The objects within a collection are often referred to as elements or items. For example, all students within a school form a collection that can be used to calculate their average grades. In this case, each student can be represented as an individual object, or element inside the collection.</p> <p>Before we go into the different collection types in Kotlin, it is important for us to understand the iterable interface and how it relates to Collections.</p> <p>*Interfaces: Interfaces in kotlin contain abstract methods and method implementations for their implementing classes.</p> <p><code>Iterable interface</code> defines the operations for iterating over elements. Let's go back to our previous example of students  inside a school being a \"collection\". If we want to go through this \"collection\" and obtain information about every students' names, how would we approach that? In the real world, we can set the students up in a line and record their names one by one. And with collections in kotlin, we can approach that with specific methods that we inherit from the iterable interface that allow us to iterate or loop through a collection. The Collection interface also has its own helpful implementations of methods for its  subclasses as well. Such as getting the size, checking item membership, checking if two collections are equal, and so on.</p> <p>Overview: Collection  is the root of the collection hierarchy. The collection interface implements the Iterable interface, meaning that it is a child of the iterable interface and will be inheriting many methods and properties from its parent."},{"location":"programming/kotlin/fundamentals/collections.html#list","title":"List","text":"<p>A List is an ordered collection with access to elements by indices \u2013 integer numbers that reflect their position.  Elements can occur more than once in a list. An example of a list is a telephone number: it's a group of digits, their  order is important, and they can repeat.</p> <p>Similar to languages like Java &amp; C++, Kotlin indices to access elements also begin at <code>0</code>. </p> <p>Example of <code>Accessing List Elements Using Indices</code></p> <p>We can access the elements within a List by using the index operator <code>[]</code>. By passing in the index value that we wish to access <code>[0]</code>, we can get the element inside.</p> KotlinJava <pre><code>fun main() {\n//sampleStart\nval myList = listOf&lt;Int&gt;(1, 2, 3, 4, 5)\nprintln(myList[0])\n//sampleEnd\n}\n</code></pre> <pre><code>public class Java {\npublic static void main(String[] args) {\nList&lt;Integer&gt; myList = new ArrayList&lt;&gt;();\nmyList.add(0, 1);\nSystem.out.println(myList.get(0));\n}\n}\n</code></pre> <p><code>Explanation:</code> Inside our simple program, we initialized a readable list of integers (only able to store integer values)                 with the values 1, 2, 3, 4, and 5. We then made an output to the console with the value stored in index ([])                0. If we were to access the index [1], the value returned would be 2.</p> <p><code>When we think about lists:</code> It can be helpful for us to visualize list elements as independent boxes, and each box contains                             a value. From our previous example, we can think of the readable list myList as a container                             for the boxes. And the independent boxes store values of 1, 2, 3, 4, and 5. When we outputted                              index 0 ([0]), we are essentially saying: \"open the box at index 0 and tell me the value inside.\"</p> <p><code>List of Strings</code>: We can also create a list of strings:</p> <p>Example of <code>List of Strings</code></p> <p>We can create a list of Strings in Kotlin similar to a list of Integers that we've seen previously.</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval myStringList = listOf&lt;String&gt;(\"f\", \"u\", \"n\", \"n\", \"y\")\nprint(myStringList[0] + myStringList[1] + myStringList[2] + myStringList[3] + myStringList[4])\nprintln()\nfor(i in myStringList) {\nprint(i)\n}\n//sampleEnd\n}\n</code></pre> <p><code>Explanation:</code> Inside our example, we created a new list of type String and initialized it with individual characters                that make up the word \"funny\". We also used a for loop to help us print out the individual characters                 instead of printing them out individually using a print statement. It is helpful right now to be exposed to the ideas                of a for loop, and we will be covering them in later chapters.</p> <p><code>Lists</code>: After exploring many examples, we can say that lists are needed when we need to store multiple values of the same              type. Lists are also helpful when we need to store values whose order matters, just like our               list of strings example.</p>"},{"location":"programming/kotlin/fundamentals/collections.html#read-only-list","title":"Read-only List","text":"<p>Similarities: Bringing back val vs. var from previous chapters, a readable-only list is quite similar to a val variable, where once it is initialized, the value of it can not be changed. This means that once we initialized a list with values, we are  not allowed to update the values(nor size), and certain operations will be limited.</p> <p>Consider the following code:</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval list = listOf&lt;Int&gt;(1, 2, 3, 4, 5)\nlist.add(6) // not legal\nlist.remove(0) // not legal\n//sampleEnd\n}\n</code></pre> <p><code>Explanation:</code> Why is the add &amp; remove methods illegal? That is because a list is automatically read-only when we                 initialize them, meaning that the contents &amp; size can not be updated after the initialization.</p> <p><code>Rules:</code> When we choose to use a fixed list, we should know that..</p> <ol> <li>After the initialization, the size is not mutable</li> <li>After the initialization, we can not add elements into the list</li> <li>After the initialization, we can not remove elements from the list</li> </ol> <p><code>why immutable lists?:</code> We use immutable lists when we are working with fixed elements. An example can be country                           names. Another example can be individual phone number digits, where their orders matter,                           and can not be changed. In general, it is a good programming practice to use immutable lists when we can                           or need to.</p>"},{"location":"programming/kotlin/fundamentals/collections.html#mutable-list","title":"Mutable List","text":"<p>Similarities: Referring back to our knowledge about var and val from previous chapters, a mutable list is quite similar                   to a var variable, where it can be changed in different places throughout our code. </p> <p>For example:</p> Kotlin <pre><code>fun main() {\n//sampleStart\n// initial size is 4 (counting from 0)\nval myMutableList = mutableListOf&lt;Int&gt;(1, 2, 3, 4, 5)\n// size is now 5\nmyMutableList.add(6)\n// size is now 4\nmyMutableList.removeAt(0)\nfor(i in myMutableList) {\nprint(\"$i\")\n}\n//sampleEnd\n}\n</code></pre> <p><code>Explanation:</code> Inside our program, we initialized a new integer mutable list with the values 1, 2, 3, 4, and 5.                Since mutable lists are dynamic, meaning that the size would adjust according to its elements, we                are able to add and remove elements. Inside the code, the <code>add()</code> method is used to add a new element                into our list. We then used the <code>removeAt()</code> method to remove the element stored in index 0, which is 1.</p> <p><code>why mutable lists?:</code> We use mutable lists when we are working with unknown amount of values. For example,                          we may prefer a mutable instead of a immutable when we are working with a list that contains                         a persons' favorite music - this list will constantly be changed and updated and some songs                         will be removed and more will be added in.</p>"},{"location":"programming/kotlin/fundamentals/collections.html#list-methods","title":"List Methods","text":"<code>get()</code> <p>The get() method requires an argument of a valid index number, and returns the value inside the index</p> Kotlin <pre><code>    fun main() {\nval myList = listOf&lt;Int&gt;(1, 2, 3)\nprintln(\"Value at index 2 is: ${myList.get(2)}\")\n}\n</code></pre> <code>subList()</code> <p>The subList() method requires two arguments, first is begin index (inclusive), second is end index(exclusive)</p> Kotlin <pre><code>    fun main() {\nval myList = listOf&lt;Int&gt;(1, 2, 3, 4, 5)\nprintln(\"Value between index 0 to 3 is: ${myList.subList(0, 3)}\")\n}\n</code></pre> <code>add()</code> <p>The add() method requires one argument, and it is the value that we wish to add to our current mutable list. The value will automatically be placed behind all indexes</p> Kotlin <pre><code>    fun main() {\nval myList = mutableListOf&lt;Int&gt;(1, 2, 3)\nmyList.add(4)\nmyList.add(5)\nprint(myList)\n}\n</code></pre> <code>remove()</code> <p>The removeAt() method removes the element at the given index</p> Kotlin <pre><code>    fun main() {\nval myList = mutableListOf&lt;String&gt;(\"Hello\", \"World\", \"And\", \"Yes\")\nprintln(myList)\nmyList.removeAt(3)\nprintln(myList)\nmyList.removeAt(2)\nprintln(myList)\n}\n</code></pre> <code>equals()</code> <p>The equals() method takes in another list of the same type, and returns a boolean on whether the two lists are equal</p> Kotlin <pre><code>    fun main() {\nval myListA = listOf&lt;Int&gt;(1, 2, 3, 4)\nval myListB = listOf&lt;Int&gt;(1, 2, 3, 4)\nval myListC = listOf&lt;Int&gt;(1, 3, 2, 5)\nprintln(myListA.equals(myListB))\nprint(myListB.equals(myListC))\n}\n</code></pre>"},{"location":"programming/kotlin/fundamentals/collections.html#set","title":"Set","text":"<p>A <code>Set</code> stores unique elements; their order is generally undefined. null elements are unique as well: a Set can contain  only one null. Two sets are equal if they have the same size, and for each element of a set there is an equal element  in the other set.</p> <p>Unlike lists: the orders in a set do not matter, and when we are using a set, we don't care about the orders.  As well, sets don't support indices to access specific indexes like lists.</p> <p>Example of a set</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval mySet = setOf(4, 2, 1, 3, 5, 9)\n// not legal: print(mySet[0])\nprint(mySet)\n//sampleEnd\n}\n</code></pre> <p><code>Explanation:</code> A set can also be seen as an unordered list, and the action mySet[] is not legal</p>"},{"location":"programming/kotlin/fundamentals/collections.html#read-only-set","title":"Read-only Set","text":"<p><code>Immutable Set:</code> A read-only set is very similar to a read-only list, where no new elements can be added or removed</p>"},{"location":"programming/kotlin/fundamentals/collections.html#mutable-set","title":"Mutable Set","text":"<p><code>Mutable Set:</code> A mutable set is also very similar to a mutable list, where elements could be added and removed. However,                a duplicate element can be added.</p>"},{"location":"programming/kotlin/fundamentals/collections.html#set-methods","title":"Set Methods","text":"<code>add()</code> <p>The add() method takes in one integer argument and adds the integer to the end of the set</p> Kotlin <pre><code>fun main() {\nval mySet = mutableSetOf&lt;Int&gt;(4, 2, 5, 6, 1)\nmySet.add(4)\nmySet.add(5)\nmySet.add(7)\n// notice how the elements 4 and 5 will not printed out for the second time -&gt; they were never added\nprint(mySet)\n}\n</code></pre> <code>remove()</code> <p>The remove() method takes in one integer argument and removes that integer from the list (if not in list, does nothing)</p> Kotlin <pre><code>fun main() {\nval mySet = mutableSetOf&lt;Int&gt;(4, 2, 5, 6, 1)\nmySet.add(7)\n// does nothing as 9 does not exist in our set\nmySet.remove(9)\n// removes the integer 5 and shifts everything \"forward\"\nmySet.remove(5)\nprint(mySet)\n}\n</code></pre>"},{"location":"programming/kotlin/fundamentals/collections.html#map","title":"Map","text":"<p><code>Map&lt;K, V&gt;</code> is not an inheritor of the Collection interface; however, it's a Kotlin collection type as well. A Map  stores key-value pairs (or entries); keys are unique, but different keys can be paired with equal values. The Map  interface provides specific functions, such as access to value by key, searching keys and values, and so on.</p> <p>Key to Value with <code>Maps</code></p> Kotlin <pre><code>fun main() {\n// initializing a map that maps a integer key to a string value\nval myMap = mapOf&lt;Int, String&gt;(1 to \"one\", 2 to \"two\", 3 to \"three\")\nprint(myMap)\n}      </code></pre> <p><code>Explanation:</code> Notice how when we created our map, we explicitly referenced it is a map of Integer keys ot String values,                this is not required, but is a good practice. When we initialized the map, we also put some pairs inside the map.                In simple words, the to keyword pairs the key to the value in our map. So the operation 1 to \"one\" means                to make a new key with integer number 1, and have it store the string of \"one\". And thus in the future,                it provides simple access to look-up the values stored inside 1.</p> <p><code>Why Maps?:</code> Maps allow us to establish relationships between keys and values, and allow us to retrieve data quickly.              Since every key is unique in a map, it allows us to more accurately retrieve the data we need. An example              key-value relationship can be student to grade. Since every student is different (unique keys), we can map              them to their corresponding grade. And thus in the future, it provides easier access for us to quickly look               at a student's grades.</p>"},{"location":"programming/kotlin/fundamentals/collections.html#read-only-map","title":"Read-only Map","text":"<p><code>Read-only maps:</code> Similar to immutable sets and lists, we will not be able to add, remove, or change any contents                   within the immutable map after it is initialized. </p> <p>Immutable Map</p> Kotlin <pre><code>fun main() {\nval myImmutableMap = mapOf&lt;Int, Char&gt;(1 to 'a', 2 to 'b', 3 to 'c', 4 to 'd')\n// not legal\n//myImmutableMap.put(5, 'e')\n// not legal\n//myImmutableMap[1] = 'f'\nprint(myImmutableMap)\n}\n</code></pre> <p><code>Explanation:</code> As shown above, operations that attempts to edit a map after its declaration is illegal.                 (you can remove the comments and see the output!)</p>"},{"location":"programming/kotlin/fundamentals/collections.html#mutable-map","title":"Mutable Map","text":"<p><code>Mutable Maps:</code> Mutable maps functions exactly the same as an immutable map, other than the abilities to be able                 to add, remove, and change the contents after its declaration. Consider the following code:</p> <p>Mutable Maps</p> Kotlin <pre><code>fun main() {\nval myMutableMap = mutableMapOf&lt;Int, Char&gt;()\n// assignment operator for maps\nmyMutableMap[1] = 'a'\n// can also use put() -&gt; works in java\nmyMutableMap.put(2, 'b')\n// adding more keys-values\nmyMutableMap[3] = 'c'\nmyMutableMap[4] = 'd'\n// creating a new pair with the key of 1 with a different value -&gt; watch what happens\nmyMutableMap[1] = 'f'\nprint(myMutableMap)\n}\n</code></pre> <p><code>Explanation:</code> As we can see, a mutable map's contents can be added or edited. However, if we make a new key that already                exists in our map, the new key will overwrite the old key with the new value.                The [] operator is different for maps than for lists and arrays. The <code>[]</code> here is used to create                 a new key and store the value on the right side of the equal sign. We are basically saying: \"Put whatever value                is on the right side of the equal sign, and store it into the key on the left side.</p>"},{"location":"programming/kotlin/fundamentals/collections.html#map-methods","title":"Map Methods","text":"<code>keys()</code> <p>The keys() method returns a list of keys from the map</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval myMap = mapOf&lt;Int, Char&gt;(1 to 'a', 2 to 'b', 3 to 'c')\nprint(myMap.keys)\n//sampleEnd\n}\n</code></pre>"},{"location":"programming/kotlin/fundamentals/common-mistakes.html","title":"Common Mistakes","text":""},{"location":"programming/kotlin/fundamentals/control-flow.html","title":"Control Flow","text":""},{"location":"programming/kotlin/fundamentals/control-flow.html#conditionals","title":"Conditionals","text":"<p>Kotlin provides <code>if</code> and <code>when</code> for checking conditional expressions.</p> <p>Kotlin <code>flow control statements</code> determine the next statement to be executed. For example, the statements if-else, if,  when, while, for, and do are flow control statements.</p> <p>Control flows are used to handle the different possibilities during runtime. The body of the control flow statements determine the actions if the expression is evaluated as true.</p> <p>Example of Control Flow</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval ageOfJohn: Int = 20\nval ageOfBrad: Int = 21\nif (ageOfJohn &lt; ageOfBrad) {\nprintln(\"The age of John is $ageOfJohn, and the age of Brad is $ageOfBrad, \\ntherefore, John is younger than Brad.\")\n}\n//sampleEnd\n}\n</code></pre> <p><code>Explanation:</code> In this simple program, we initialized two variables of type integer. The two integer variables store the                 integer 20, and 21, representing the age of two people - John and Brad. We then evaluated the two ages                 using an if statement. </p> <p>Consider the following flowchart:</p> <pre><code>    graph TD;\n        Program--&gt;EvaluateAge\n        EvaluateAge--&gt;True\n        True--&gt;EnterConditionalBody\n        EnterConditionalBody--&gt;PrintStatement\n        PrintStatement--&gt;LeftConditionalBody\n        LeftConditionalBody--&gt;EndOfProgram\n        EvaluateAge--&gt;False\n        False--&gt;DoNothing\n        DoNothing--&gt;EndOfProgram</code></pre> <p><code>Explanation of diagram:</code> This particular flowchart represents our simple program. As the program executes, it enters our                            conditional statement. If the expression <code>(ageOfJohn &lt; ageOfBrad)</code> or <code>(20 &lt; 21)</code> evaluates to                            true, it enters our statement body and prints out the statement. But if it evaluates to false, it leaves                           the conditional statement and ends.</p> <p><code>Conditionals:</code> As shown, conditionals can be very helpful when it comes to the evaluations of expressions, and how we                 can implement different actions based on their boolean evaluations. </p>"},{"location":"programming/kotlin/fundamentals/control-flow.html#if-statements","title":"<code>if</code> Statements","text":"<p>'if' statement is used to execute the block of code when the condition becomes true.</p> <p><code>Connection:</code> Similar to what was shown on the previous topic, an if statement will execute if the evaluated expression becomes               true, but does nothing when it is evaluated to false. Consider the following programs:</p> <p>Example 1</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval small: Int = 1\nval big: Int = 2\nif(small &lt; big) println(\"$small is smaller than $big!\")\nif(small &gt; big) println(\"$small is not bigger than $big!\")\n//sampleEnd\n}\n</code></pre> <p>Example 2 -&gt; <code>==</code> operator checks if two contents are equal</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval numOne: Double = 2.2\nval numTwo: Double = 2.2\nif(numOne == numTwo) println(\"$numOne is equal or = to $numTwo!\")\nif(numOne &gt; numTwo) println(\"$numOne is NOT greater than $numTwo!\")\n//sampleEnd\n}\n</code></pre> <p>Example 3 -&gt; <code>&lt;= || &gt;=</code> is <code>greater/less than or equal to</code></p> Kotlin <pre><code>fun main() {\n//sampleStart\nval numOne: Int = 1\nval numTwo: Int = 2\nval numThree: Int = 2\n// evaluates to true because numOne is less than numTwo\nif(numOne &lt;= numTwo) println(\"$numOne is less than or equal to $numTwo!\")\n// evaluates to true because numThree is equal to numTwo\nif(numThree &gt;= numTwo) println(\"$numThree is greater than or equal to $numTwo\")\n//sampleEnd\n}\n</code></pre> <p>Example 4 -&gt; <code>! operator</code> -&gt; <code>!=</code> is not equal to</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval numOne: Int = 1\nval numTwo: Int = 2\n// evaluates to true because numOne does not equal to numTwo\nif(numOne != numTwo) println(\"$numOne DOES NOT equal to $numTwo\")\n//sampleEnd\n}\n</code></pre>"},{"location":"programming/kotlin/fundamentals/control-flow.html#if-else","title":"<code>if-else</code>","text":"<p><code>if-else</code> statements are very similar to if-statements, only with an additional else. Consider the following flowchart:</p> <pre><code>    graph TD;\n        Start--&gt;Evaluation\n        Evaluation--&gt;True\n        True--&gt;If-Block\n        If-Block--&gt;ExecuteIfAction\n        ExecuteIfAction--&gt;FinishExecuting\n        FinishExecuting--&gt;End\n        Evaluation--&gt;False\n        False--&gt;Else-Block\n        Else-Block--&gt;ExecuteElseAction\n        ExecuteElseAction--&gt;FinishExecuting</code></pre> <p>Example of <code>If-Else</code></p> Kotlin <pre><code>fun main() {\n//sampleStart\nval numOne: Int = 1\nval numTwo: Int = 2\nif(numOne &gt; numTwo) {\nprintln(\"If-Block: $numOne is NOT greater than $numTwo!\")\n} else {\nprintln(\"Else-Block: $numTwo is greater than $numOne!\")\n}\n//sampleEnd\n}\n</code></pre> <p><code>Explanation:</code> Inside the program above, we initialized two variables of type integer. Within our if-else blocks,                the if-block will not execute because it will be evaluated to false since 1 is not greater than 2.                Once the if-block evaluates to false, the else-block is executed.</p> <p><code>Else:</code> The contents within the else block will execute if the if-block is evaluated as false.</p> <p>Example 2 -&gt; <code>length</code> returns the length of a string</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval dog: String = \"dog\"\nval dinosaur: String = \"dinosaur\"\nif(dog.length &gt; dinosaur.length) println(\"dogs are bigger than dinosaurs!\")\nelse println(\"dinosaurs are bigger than dogs!\")\n//sampleEnd\n}\n</code></pre> <p><code>Why if-else?:</code> We use if-else blocks to execute another block of code when the if-block evaluates to false.                  Consider the following code as an example:</p> <p>Example program</p> Kotlin <pre><code>fun main() {\n//sampleStart\nval BradSignedIn: Boolean = false\nif(BradSignedIn) println(\"Welcome!\")\nelse println(\"Please sign in first, Brad!\")\n//sampleEnd\n}\n</code></pre> <p><code>Explanation:</code> Since there are only two possibilities, signed-in or not signed-in, we can create a simple if-else                to check for the user's sign-in status.</p>"},{"location":"programming/kotlin/fundamentals/control-flow.html#when-statements","title":"'when' Statements","text":"<p><code>When</code> defines a conditional expression with multiple branches. It is similar to the switch statement in C-like languages.  Its simple form looks like this:</p> <p>Example of when statement</p> <p>=== \"Kotlin' <pre><code>fun main() {\n//sampleStart\nval x: Int = 2\nwhen(x) {\n1 -&gt; print(\"x = 1\")\n2 -&gt; print(\"x = 2\")\nelse -&gt; {\nprint(\"x is neither 1 nor 2\")\n}\n}\n//sampleEnd\n}\n</code></pre></p> <p><code>Explanation:</code> When statements can be seen as a combination of multiple if-statements and a else-statement.                The syntax when(x) means that we are operating the when-statement on the variable x. Inside the                 when block, if x == 1, we do an action, if x == 2, we do an action, and finally, we do something else                when x != 1 nor 2.</p>"},{"location":"programming/kotlin/fundamentals/functions.html","title":"Functions","text":""},{"location":"programming/kotlin/fundamentals/functions.html#declaring-a-function","title":"Declaring a Function","text":""},{"location":"programming/kotlin/fundamentals/functions.html#using-functions","title":"Using Functions","text":""},{"location":"programming/kotlin/fundamentals/functions.html#arguments-parameters","title":"Arguments &amp; Parameters","text":""},{"location":"programming/kotlin/fundamentals/functions.html#return-types","title":"Return Types","text":""},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html","title":"Introduction to Kotlin","text":"<p>Kotlin is a programming language that is designed to be concise, safe, and expressive. It is runs on multiple platforms, including JVM, Android, browsers, and even natively on computers!</p> <p></p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#why-kotlin","title":"Why Kotlin?","text":"<p>In the past, our team has used Java as our primary programming language. However, we have decided to switch to Kotlin. Here's why:</p> <ul> <li>Conciseness, multi-paradigm structure and interoperability</li> <li>As a first programming language, gradual introduction of programming concepts without confusing boilerplate</li> <li>Learn modern, generalizable programming habits which can be applied to use in the industry</li> </ul>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#kotlin-in-industry-and-academia","title":"Kotlin in Industry and Academia","text":"<p>Kotlin has already established itself to be highly impactful in sectors  including mobile development, and server-side &amp; cloud development. Additionally, Kotlin is trending in fields such as Multiplatform development, web frontend development, data science &amp; machine learning, and desktop application development.</p> <ul> <li> <p> Academically Recognized</p> <p>Top universities such as Stanford, Cambridge, UPenn, UMich, John Hopkins, and UCLA have adopted Kotlin within their computer science programs.</p> <p> See which Universities teach Kotlin</p> </li> <li> <p> Language of the industry</p> <p>Kotlin is used by top companies such as  Google,  Amazon,  Twitter,  Reddit,  Netflix,  Uber,  Slack, just to name a few.</p> </li> </ul>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#features","title":"Features","text":""},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#concise-code","title":"Concise Code","text":"<p>Compared to Java, an industry standard, Kotlin is much more concise - reducing the number of lines of code by 40% on average. This, paired with a simple syntax, allows us to focus on the actual ideas behind our code and programming.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#multi-platform","title":"Multi-Platform","text":"<p>Kotlin is a multi-platform language, meaning that code can be run or executed across multiple platforms. Essentially, this allows us to write code once, and run it anywhere.</p> How does Kotlin run on multiple platforms? <p>Kotlin is a compiled language, meaning that it is translated (compiled) into bytecode (a set of instructions that can be executed by a computer). Then, bytecode can be translated into specific machine code for a specific platform.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#compilation-processes","title":"Compilation Processes","text":"<p>A more traditional approach would be to compile the code into machine code for a specific platform, which is what the C programming language does.</p> <pre><code>graph LR\n    S[Source Code]\n    M[Machine Code]\n    C[Computer]\n\n    S -- Compiler --&gt; M -- Runs On --&gt; C</code></pre> <p>The problem with this approach is that we need to compile the code for each platform that we want to run it on. This means that we need to compile separate versions of the code for each platform, such as Windows, MacOS, and Linux.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#the-java-virtual-machine","title":"The Java Virtual Machine","text":"<p>What if we could compile the code once, and run it anywhere? This is where the Java Virtual Machine (JVM) comes in. JVM handles the translation of bytecode into machine code for a specific platform.</p> <pre><code>graph LR\n    S[Source Code]\n    B[Bytecode]\n    M[JVM]\n\n    subgraph P[JVM Platforms]\n        Android\n        Windows\n        MacOS\n        Linux\n    end\n\n    S -- Compiler --&gt; B -- Run the Program --&gt; M -- Runs Anywhere --&gt; P\n    S -. Runs Once .-&gt; B</code></pre>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#kotlin-multiplatform","title":"Kotlin Multiplatform","text":"<p>Kotlin takes this idea one step further, allowing us to run code on multiple platforms, including JVM</p> <pre><code>graph LR\n    S[Source Code]\n    B[Bytecode]\n    M[JVM]\n    W[Web Assembly]\n    Br[Browser]\n    I[iOS]\n\n    subgraph P[JVM Platforms]\n        Android\n        Windows\n        MacOS\n        Linux\n    end\n\n    K[Native Code] \n\n    S -- Compiler --&gt; B -- Run the Program --&gt; M -- Runs Anywhere --&gt; P\n    S -- Compiles --&gt; W --&gt; Br\n    S -- Compiles --&gt; K --&gt; P\n    K --&gt; I</code></pre>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#static-typing","title":"Static Typing","text":"<p>Static typing is a way of defining the data types of variables and expressions in a programming language, enforcing the type of operations that can be performed on data. </p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#what-is-typing","title":"What is Typing?","text":"<p>Why does this typing matter though? Let's break this down into a couple of exercises. Think of what result you would get if you were to perform the following operations:</p> Adding two words, <code>John</code> + <code>Doe</code> = <code>???</code> <p>If we were to add two words, <code>John</code> and <code>Doe</code>, we would get <code>JohnDoe</code>. This is because the <code>+</code> operator for words will concatenate them together.</p> <p>If your answer was <code>John Doe</code>, you would be wrong. That would be the result if we were to add <code>John</code> and <code>Doe</code> with a space in between them. Don't worry about that though </p> Adding two numbers, <code>14</code> + <code>3</code> = <code>???</code> <p>If we were to add two numbers, <code>14</code> and <code>3</code>, we would get <code>17</code>. This is because the <code>+</code> operator is defined for numbers, and adds them together. Makes sense, right?</p> What about two words, <code>1</code> + <code>1</code> = <code>???</code> <p>If we were to add two words, <code>1</code> and <code>1</code>, we would get <code>11</code>. This is because the <code>+</code> operator is defined for words, and concatenates them together. </p> <p>If you answered <code>2</code>, you would be wrong. Remember, when you add two words together, you need to literally add them together. Beginning to see a problem? </p> <p>As shown in the examples above, static typing allows us to define the type of operations that can be performed on data.  In this case, adding two words will concatenate them together, while adding two numbers will mathematically add them together.</p> <p>In other words, the operation performed on data is dependent on the type of data. This is the core idea behind any typing.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#enforcing-type-safety","title":"Enforcing Type Safety","text":"<p>Static typing also allows us to enforce types - meaning that the type of element must remain a specific type at any given time. This means that we can prevent operations from being performed on data that is not defined for that type.</p> <p>For example, if we were to try to add a word with a number, we would get an error. This is because the <code>+</code> operator is not defined for words and numbers.</p> <p>Note</p> <p>Static typing is not the only way to define the type of operations that can be performed on data. There are other ways, such as dynamic typing, which is used in languages such as Python and JavaScript.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#type-inference","title":"Type Inference","text":"<p>Type inference is a way of automatically determining the type of a variable or expression. This allows us to write code without having to explicitly define the type of a variable or expression - it saves us time and makes our code more concise.</p> <p>For example, if we were to define a variable <code>name</code> and assign it the value <code>\"John\"</code>, we would not have to explicitly define the type of <code>name</code> as a word. Instead, Kotlin would automatically infer that <code>name</code> is a word. Note that typing still exists, and add operations on <code>name</code> would still result in concatenation.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#null-safety","title":"Null Safety","text":"<p>Kotlin enforces null safety, meaning that we cannot assign a variable to <code>null</code> unless we explicitly define it as it being nullable. This prevents us from encountering null pointer exceptions, an extremely common error in Java.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-kotlin.html#hello-world","title":"Hello World","text":"<p>Your turn! Let's write our first Kotlin program.</p> <p>Tip</p> <p>While you can write Kotlin code on the web, it is recommended that you eventually properly setup your computer for Kotlin development, allowing you to write and run Kotlin code locally.</p> <p>For the sake of simplicity for now, we can embedded Kotlin code in this website or Kotlin Playground . You can run the code with the  on the top right corner.</p> <pre><code>fun main() {\nprintln(\"Hello World!\")\n// Hello World!\n}\n</code></pre> <p>This is a simple program that prints <code>Hello World!</code> to the console. Let's break it down.</p> <ul> <li><code>fun</code> is used to declare a function.</li> <li>The <code>main</code> function is where your program starts from - it's the entry point to the program.</li> <li>The body of a function is written between curly braces <code>{}</code>.</li> <li><code>println</code> is a function that prints a line to the console.</li> </ul> <p>Info</p> <p>Functions are discussed in more detail in a couple of sections. Until then, all examples use the <code>main()</code> function.</p> <p>Tip</p> <p>From here on, you can expect to see most examples in both Kotlin, Java, and Python. This can help you if you already know Java/Python, or if you want to learn Java/Python in the future.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-programming.html","title":"Introduction to Programming","text":""},{"location":"programming/kotlin/fundamentals/intro-to-programming.html#computational-processes","title":"Computational Processes","text":"<p>Anytime you turn on your phone, open an app, or check your email - your computer launches this abstract idea of a computational process. Essentially, a computational process is a series of steps that a computer takes to complete a task. These simple processes can later evolve to become more complex, and eventually becoming the programs that we use every day.</p> <pre><code>sequenceDiagram\n    participant User\n    participant Phone\n    User-&gt;&gt; Phone: Turn on\n    Phone-&gt;&gt; User: Show home screen\n    User-&gt;&gt; Phone: Check email\n    Phone-&gt;&gt; User: Show email app\n</code></pre> <p>The next step is to tell our computer to complete a computational process. This is where programming languages come in.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-programming.html#programming-languages","title":"Programming Languages","text":"<p>Programming languages are a set of rules that allow us to tell our computer to complete a computational process. </p> <p>Typically, good programming languages are designed to by easy to read and write, in such a way to be easy to understand by both humans and computers.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-programming.html#common-features","title":"Common Features","text":"<p>While programming languages may differ in syntax, they typically share a common set of features:</p> <ul> <li>Expressions: A combination of values, variables, operators - the simplest forms of programming.</li> <li>Combinations: Takes expressions and combines them to form more complex expressions.</li> <li>Abstractions: Allows us to name, modify, and interact with complex expressions.</li> </ul> <p>What's the best programming language?</p> <p>There is no \"best\" programming language. Each programming language typically has its own set of strengths and weaknesses - some are better for certain tasks than others.</p> <p>As you gain more experience with programing, you'll realize that it's not about the language, but rather the concepts and ideas that you learn. Picking up new languages becomes easier - it's just a matter of learning the syntax.</p> <p>That being said, there's no reason to start with a \"hard\" language. We recommend starting with a language that is easy to learn - such as Python or Java, and then moving on to more complex languages.</p>"},{"location":"programming/kotlin/fundamentals/intro-to-programming.html#abstractions","title":"Abstractions","text":"<p>Abstraction is a way of simplifying something by removing unnecessary details. </p> <p>In computer science, abstraction is used to make complex programs easier to understand and use. For example, when you open a file on your computer, you don't need to know how the file is actually stored on your hard drive. You just need to know that you can open it and read its contents.</p> <p>Abstraction is used in many different ways in computer science. Mastering abstraction is an important part of learning how to program.</p> <p>Example</p> <p>Imagine that you are driving a car. You don't need to know how the engine works in order to drive the car. You just need to know how to use the controls. The details of how the engine works are hidden from you, which allows you to focus on the essential features of driving the car.</p> <p>In this example, we would say the hardware of the car is \"abstracted\" away from you.</p> <p>In the same way, abstraction in computer science allows you to focus on the essential features of a program, without having to worry about the details of how the program is implemented. This makes programs easier to understand and use.</p> <p>As you learn more about programming, you'll learn about different types of abstractions, such as functions, classes, objects, and data structures.</p> <p>To end this section, here's a quote from Linus Torvalds, the creator of Linux:</p> <p>Quote</p> <p>\"Bad programmers worry about the code. Good programmers worry about data structures and their relationships.\"</p> <p>Being able to master abstractions is one of the most important skills in programming.</p>"},{"location":"programming/kotlin/fundamentals/loops.html","title":"Loops","text":""},{"location":"programming/kotlin/fundamentals/loops.html#for-loops","title":"For loops","text":""},{"location":"programming/kotlin/fundamentals/loops.html#while-loops","title":"While Loops","text":""},{"location":"programming/kotlin/fundamentals/loops.html#break-continue","title":"Break &amp; Continue","text":""},{"location":"programming/kotlin/fundamentals/variables.html","title":"Variables","text":""},{"location":"programming/kotlin/fundamentals/variables.html#expression","title":"Expression","text":"<p>Expressions simply describe any computation that produces a value and are the basic building blocks of any program.</p> <p>Examples of expressions</p> <p>You've probably seen expressions before. Here are some examples: $$ \\large 22 + 4, \\frac{22}{4}, \\sin \\pi, \\sum_{i=1}^n{i}, -2204, \\log x, 22.04 $$</p>"},{"location":"programming/kotlin/fundamentals/variables.html#call-expressions","title":"Call Expressions","text":"<p>Let's take a look at the expression <code>add(2, 3)</code>. This is called a call expression. It is composed of the following parts:</p> <ul> <li><code>add</code>: the function name, known as the operator</li> <li><code>2</code> and <code>3</code>: the operands</li> </ul> <p>When we evaluate a call expression, we </p> <ol> <li>Evaluate the operands from left to right</li> <li>Apply the operator (function) to the operands (arguments)</li> </ol> <p></p> Practice: Evaluate <code>add(2, add(3, 4))</code> <p>Let's walk through step-by-step how we would evaluate this expression.</p> <pre><code>stateDiagram\n    state \"add(2, add(3, 4))\" as [original]\n    state \"evaluate 2\" as [2]\n    state \"evaluate add(3, 4)\" as [a34]\n    state \"evaluate 3\" as [3]\n    state \"evaluate 4\" as [4]\n    state \"apply 3 + 4\" as [ap34]\n    state \"7\" as [7]\n    state \"apply 2 + 7\" as [ap27]\n    state \"9\" as [9]\n    [*] --&gt; [original]\n    [original] --&gt; [2]\n    [original] --&gt; [a34]\n    [a34] --&gt; [3]\n    [a34] --&gt; [4]\n    [3] --&gt; [ap34]\n    [4] --&gt; [ap34]\n    [ap34] --&gt; [7]\n    [2] --&gt; [ap27]\n    [7] --&gt; [ap27]\n    [ap27] --&gt; [9]\n    [9] --&gt; [*]</code></pre> <p>Keep in mind this whole time, we are evaluating each operand from left to right. Once we encounter another call expression, we begin the call expression evaluation for the specific call expression. Finally we apply the operator to the operands.</p>"},{"location":"programming/kotlin/fundamentals/variables.html#assignment-statements","title":"Assignment Statements","text":"<p>All programs need to be able to store data, and variables help you to do just that. In Kotlin, you can declare:</p> <ul> <li>read-only variables with <code>val</code></li> <li>mutable variables with <code>var</code></li> </ul> <p>When you declare a variable, you assign it an expression with the <code>=</code> operator. This is called an assignment statement.</p> <p>Example of <code>val</code></p> <p>We can declare a read-only variable <code>x</code> with the value <code>22</code>, and a read-only variable <code>y</code> with the value <code>4</code>.</p> KotlinJavaPython <pre><code>fun main() {\n//sampleStart\nval x = 22\nval y = 4\nprintln(x + y)\n//sampleEnd\n}\n</code></pre> <pre><code>public class Main {\npublic static void main(String[] args) {\nint x = 22;\nint y = 4;\nSystem.out.println(x + y);\n}\n}\n</code></pre> <pre><code>x = 22 # Variables in Python are mutable, but we can still treat them as read-only\ny= 4\nprint(x + y)\n</code></pre> <p>Example of <code>var</code></p> <p>Let's say my bank account has <code>$100</code> in it. I can declare a mutable variable <code>bankAccount</code> with the initial value of <code>100</code>.</p> KotlinJavaPython <pre><code>fun main() {\n//sampleStart\nvar bankAccount = 100\nprintln(\"My bank account has:\")\nprintln(bankAccount)\nbankAccount = 80;\nprintln(\"Just spent $20, I now have $\" + bankAccount + \" left\")\n//sampleEnd\n}\n</code></pre> <pre><code>public class Main {\npublic static void main(String[] args) {\nint bankAccount = 100;\nSystem.out.println(\"My bank account has:\");\nSystem.out.println(bankAccount);\nbankAccount = 80;\nSystem.out.println(\"Just spent $20, I now have $\" + bankAccount + \" left\");\n}\n}\n</code></pre> <pre><code>bank_account = 100\nprint(\"My bank account has:\")\nprint(bank_account)\nbank_account = 80\nprint(\"Just spent $20, I now have $\" + str(bank_account) + \" left\")\n</code></pre> <p>Why not declare everything as a <code>var</code>?</p> <p>Is it alright to legal everything as a <code>var</code>? Yes! No ones stopping you </p> <p>However, it is considered good practice to declare variables as <code>val</code> by default, and only declare variables as <code>var</code> if necessary. Declaring variables properly can not only let other people know how you intend to use the variable, but also help the compiler optimize your code and catch any potential bugs.</p>"},{"location":"programming/kotlin/fundamentals/variables.html#string-templates","title":"String Templates","text":"<p>It's useful to know how to print the contents of variables to standard output. You can do this with string templates <code>$</code>, which gives access data stored in variables and other objects, and convert them into strings.</p> <p>Info</p> <p>A string value is a sequence of characters in double quotes <code>\"\"</code>. This can include words, sentences, and even whole paragraphs. See more about Strings here</p> <pre><code>fun main() {\n//sampleStart\nval customers = 10\nprintln(\"There are $customers customers\")\n// There are 10 customers\nprintln(\"There are ${customers + 1} customers\")\n// There are 11 customers\n//sampleEnd\n}\n</code></pre> <p>Comments</p> <p>You may have noticed the <code>//</code> in the code above. This is a comment. Comments are ignored by the language, and typically provide information about the code. In this case, the comments are used to show the output of the code. Another way to comment is with <code>/*</code> and <code>*/</code>. This is useful for multi-line comments.</p> <pre><code>fun main() {\n//sampleStart\n/* This is a multi-line comment\nIt can span multiple lines\nWoahhh!\n*/\nprintln(\"Yipee\")\n//sampleEnd\n}\n</code></pre>"},{"location":"programming/kotlin/fundamentals/variables.html#practice","title":"Practice","text":"<p>Complete the code to make the program print \"Mary is 20 years old\" by using the information provided in the variables <code>name</code> and <code>age</code>.</p> <pre><code>fun main() {\n//sampleStart\nval name = \"Mary\"\nval age = 20\n// Write your code here\n//sampleEnd\n}\n</code></pre> Solution <p>The solution uses string templates to get the values of <code>name</code> and <code>age</code> and combine them into the expected format. <pre><code>fun main() {\n//sampleStart\nval name = \"Mary\"\nval age = 20\nprintln(\"$name is $age years old\")\n//sampleEnd\n}\n</code></pre></p>"},{"location":"programming/kotlin/fundamentals/variables.html#basic-data-types","title":"Basic Data Types","text":"<p>Every variable and data structure in Kotlin has a data type. Data types are important because they tell the compiler what you are allowed to do with that variable or data structure. In other words, what functions and properties it has.</p> <p>Kotlin was able to tell in the previous example that customers has type: <code>Int</code> through a method known as type inference. Because <code>customers</code> was assigned an integer value, Kotlin infers that customers has numerical data type: <code>Int</code>. As a result, the compiler knows that you can perform arithmetic operations with <code>customers</code></p> KotlinJavaPython <pre><code>fun main() {\n//sampleStart\nvar customers = 10\n// Some customers leave the queue\ncustomers = 8\ncustomers = customers + 3 // Example of addition: 11\ncustomers += 7            // Example of addition: 18\ncustomers -= 3            // Example of subtraction: 15\ncustomers *= 2            // Example of multiplication: 30\ncustomers /= 3            // Example of division: 10\nprintln(customers) // 10\n//sampleEnd\n}\n</code></pre> <pre><code>public class Main {\npublic static void main(String[] args) { int customers = 10;\n// Some customers leave the queue\ncustomers = 8;\ncustomers = customers + 3; // Example of addition: 11\ncustomers += 7;            // Example of addition: 18\ncustomers -= 3;            // Example of subtraction: 15\ncustomers *= 2;            // Example of multiplication: 30\ncustomers /= 3;            // Example of division: 10\nSystem.out.println(customers); // 10\n}\n}\n</code></pre> <pre><code>customers = 10\n# Some customers leave the queue\ncustomers = 8\ncustomers = customers + 3 # Example of addition: 11\ncustomers += 7            # Example of addition: 18\ncustomers -= 3            # Example of subtraction: 15\ncustomers *= 2            # Example of multiplication: 30\ncustomers /= 3            # Example of division: 10\nprint(customers) # 10\n</code></pre> <p>Tip</p> <p><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, and <code>%=</code> are augmented assignment operators. Essentially, they assign a new value to the variable on the left side of the operator with the result of the operation on the right side of the operator.</p> <p>For example, <code>customers += 7</code> is equivalent to <code>customers = customers + 7</code>, and <code>customers /= 3</code> is equivalent to <code>customers = customers / 3</code>.</p> <p>For more information, see Augmented assignments</p> Category Data Type Description Integers <code>Byte</code>, <code>Short</code>, <code>Int</code>, <code>Long</code> Any whole number that can be positive, negative, or zero. Unsigned Integers <code>UByte</code>, <code>UShort</code>, <code>UInt</code>, <code>ULong</code> Any integer, but cannot be negative Floating Point Numbers <code>Float</code>, <code>Double</code> Any decimal number Boolean <code>Boolean</code> Represents a <code>true</code> or <code>false</code> state Characters <code>Char</code> Any single character Unicode or ASCII character String <code>String</code> Any combination of characters"},{"location":"programming/kotlin/fundamentals/variables.html#advanced-assignment-statements","title":"Advanced Assignment Statements","text":"<p>With your new-found knowledge of basic types, you unlock the ability to use more advanced assignment statements. While these are not common in FRC, they are still useful to know about.</p> <pre><code>fun main() {\n//sampleStart\n// Variable declared without initialization\nval d: Int\n// Variable initialized\nd = 3\n// Variable explicitly typed and initialized\nval e: String = \"hello\"\n// Variables can be read because they have been initialized\nprintln(d) // 3\nprintln(e) // hello\n//sampleEnd\n}\n</code></pre>"},{"location":"programming/version-control/git-dev-patterns.html","title":"Git Development Patterns","text":""},{"location":"programming/version-control/git-dev-patterns.html#feature-branching","title":"Feature Branching","text":""},{"location":"programming/version-control/git-dev-patterns.html#gitflow-optional","title":"Gitflow (Optional)","text":""},{"location":"programming/version-control/git-dev-patterns.html#forking-workflow-optional","title":"Forking Workflow (Optional)","text":""},{"location":"programming/version-control/git-github-intellij.html","title":"Git, GitHub, and IntelliJ","text":"<p>IntelliJ has built-in support for Git as well as integrations for GitHub. This means that you can use IntelliJ as a graphical user interface for Git, never having to touch your terminal!</p> <p>Tip</p> <p>It's still a good idea to familiarize yourself with how to use Git from the command line. While using IntelliJ unlocks greater productivity, the basics of Git are still best learned from the command line. </p>"},{"location":"programming/version-control/git-github-intellij.html#cloning-a-repository-from-intellij","title":"Cloning a Repository from IntelliJ","text":"<p>Depending on the version of IntelliJ you are using, you may be able to clone a repository from the welcome screen or from the <code>File</code> &gt; <code>New Project</code> &gt; <code>Get from VCS</code> menu.</p> <p>To access the welcome screen, launch IntelliJ or close the current project you have open with <code>File</code> &gt; <code>Close Project</code>. You should see a screen like this:</p> <p></p> <p>Clone your repository by clicking on <code>Get from Version Control</code> and entering the URL of your repository.</p> Not Working? <p>Check whether you have Git installed on your computer. See git setup for more information.</p>"},{"location":"programming/version-control/git-github-intellij.html#checking-file-status","title":"Checking File Status","text":""},{"location":"programming/version-control/git-github-intellij.html#project-view","title":"Project View","text":"<p>The project view in IntelliJ will show you the status of your files. Files that are not tracked by Git will be shown in red, and files that are created will show up in green. Files that have been updated will show up in blue. For more information, visit JetBrain's documentation regarding file status highlights.</p>"},{"location":"programming/version-control/git-github-intellij.html#changelist","title":"Changelist","text":"<p>The changelist view in IntelliJ will show you all the files that have been changed since the last commit. You can open the changelist view by clicking on the <code>Commits</code> or <code>Version Control</code> tab on the left of the screen.</p> <p>Tip</p> <p>If you remember from git add, you need to add files to the staging area before you can commit them. IntelliJ makes this process simpler by incorporating a changelist, which can automatically pick up when files have been changed.</p> <p>Like the project view, files color will be determined by their status.</p> <p></p>"},{"location":"programming/version-control/git-github-intellij.html#branch-management","title":"Branch Management","text":"<p>In IntelliJ IDEA, all operations with branches are performed in the Git Branches popup. To invoke it, in the main window header, click the Git widget with the name of the branch that is currently checked out:</p> Git Branches PopupBranches Pane <p></p> <p></p> Cant Find It? <p>Depending on the version of IntelliJ you are using, you may see a different version of the Git Branches Popup or the Branches pane. The functionality is the same, but the UI may be different. Visit JetBrains official documentation for managing branches for more information.</p>"},{"location":"programming/version-control/git-github-intellij.html#syncing","title":"Syncing","text":"<p>With the git branches popup, IntelliJ will inform you if there are incoming commits.</p> <p></p> <p>Tip</p> <p>The most common way to sync changes with a remote repository is with Updating Project. Feel free to skip to there.</p>"},{"location":"programming/version-control/git-github-intellij.html#fetching-changes","title":"Fetching Changes","text":"<p>Fetching with IntelliJ does the same as <code>git fetch</code>. It will download the latest commits from the remote repository, but will not update your local repository.</p> <p>To fetch the latest updates, use <code>Git</code> &gt; <code>Fetch</code> or use the Branches popup and click </p>"},{"location":"programming/version-control/git-github-intellij.html#updating-branches","title":"Updating Branches","text":"<p>Use update if you need to sync a specific branch with its remote tracked branch. This is a convenient shortcut for fetching and subsequently applying changes to the selected branch.</p> <p>In the Branches popup or in the Branches pane of the Version Control tool window, select a branch and choose Update from the context menu.</p> <p>Info</p> <p>IntelliJ IDEA will pull changes from the remote branch and will rebase or merge them into the local branch depending on which update method is selected in <code>Settings</code> &gt; <code>Version Control</code> &gt; <code>Git</code>.</p>"},{"location":"programming/version-control/git-github-intellij.html#pulling-changes","title":"Pulling Changes","text":"<p>Pulling with IntelliJ does the same as <code>git pull</code>. It will download the latest commits from the remote repository and update your local repository.</p> <p>To pull the latest updates, use <code>Git</code> &gt; <code>Pull</code> and the pull dialog will appear. </p> What are the Additional Options? <p><code>--rebase</code>: after fetching the changes from a remote branch, IntelliJ IDEA will rebase local unpushed changes onto the fetched changes.</p> <p><code>--ff-only</code>: the merge will be resolved only if it is possible to fast-forward.</p> <p><code>--no-ff</code>: a merge commit will be created in all cases, even if the merge could be resolved as a fast-forward.</p> <p><code>--squash</code>: a single commit with all pulled changes will be created on top of the current branch.</p> <p><code>--no-commit</code>: a merge will be performed, but a merge commit will not be created so that you can inspect the result of the merge before committing.</p> <p>To learn more about the additional options when pulling changes, visit Git's pull documentation here</p>"},{"location":"programming/version-control/git-github-intellij.html#updating-project","title":"Updating Project","text":"<p>When running <code>git pull</code>, Git will automatically run <code>git fetch</code> and <code>git merge</code>. However, the updated version only applies it to one specific branch. With <code>Update Project</code>, IntelliJ will apply the changes to all branches.</p> <p>With the main menu, choose <code>Git</code> &gt; <code>Update Project</code> or  Ctrl+T. This will open the Update Project dialog.</p> <p>Select the update type <code>Merge</code>. Merging will apply the changes from the remote repository to your local repository. This the same as <code>git merge</code>.</p> <p>Tip</p> <p>This is the most common way and convenient way to sync changes with a remote repository.</p>"},{"location":"programming/version-control/git-github-intellij.html#committing-and-pushing-changes","title":"Committing and Pushing Changes","text":"<p>After you've added new files to the Git repository, or modified files that are already under Git version control and you are happy with their current state, you can share the results of your work. This involves committing them locally to record the snapshot of your repository to the project history, and then pushing them to the remote repository so that they become available to others.</p> <p>Set your Git Username</p> <p>Git needs to know your username to associate commits with an identity. If you have not set your username, IntelliJ IDEA will prompt you to specify it when you first attempt to commit changes.</p>"},{"location":"programming/version-control/git-github-intellij.html#shortcuts","title":"Shortcuts","text":"Action Shortcut Commit Tool Window Alt+0 Commit Ctrl+K Commit and Push Ctrl+Alt+K Push Ctrl+Shift+K"},{"location":"programming/version-control/git-github-intellij.html#committing-changes","title":"Committing Changes","text":"<p>Open the vertical Commit tool window Alt+0 located on the left:</p> <p></p> <p>As your changes are ready to be committed, select the corresponding files or an entire changelist.</p> <p>Tip</p> <p>If you press Ctrl+K, the entire active changelist will be selected.</p> <p>You can also select files under the Unversioned Files node \u2014 IntelliJ IDEA will stage and commit these files in one step. Beware that this action will add all unversioned files to the repository, which could potentially include files which are private or contain sensitive information.</p> <p>Enter the commit message. You can click Commit message history button  to choose from the list of recent commit messages.</p> <p>Tip</p> <p>You can also edit the commit message later before you've pushed the commit.</p>"},{"location":"programming/version-control/git-github-intellij.html#committing-partial-changes","title":"Committing Partial Changes","text":"<p>Sometimes when you make changes that are related to a specific task, you also apply other unrelated code modifications that affect the same file.  This isn't desirable because we want to be able to break down our changes into smaller, more manageable commits, rather than one large chunk.</p> <p>IntelliJ IDEA lets you commit such changes separately in one of the following ways:</p> Selecting chunks to commit <ol> <li> <p>Open the vertical Commit tool window Alt+0 located on the left</p> </li> <li> <p>To display the differences between the repository version and the local version of the selected file, in the Commit tool window Alt+0, click the Diff icon  on the toolbar or press Ctrl+D.</p> </li> <li> <p>Select the checkbox next to each chunk of modified or newly added code that you want to commit, and leave other changes unselected: </p> </li> <li> <p>Click Commit. Unselected changes will stay in the current changelist, so that you can commit them separately.</p> </li> </ol> Putting changes on a different changelist <ol> <li> <p>When you make a change to a file in the editor, click the corresponding change marker in the gutter.</p> </li> <li> <p>In the toolbar that appears, select the target changelist for the modified code chunk (or create a new changelist): </p> </li> <li> <p>Commit each changelist separately.</p> </li> </ol>"},{"location":"programming/version-control/git-github-intellij.html#pushing-changes","title":"Pushing Changes","text":"<p>To push changes from the current branch press Ctrl+Shift+K or choose <code>Git</code> &gt; <code>Push</code> from the main menu.</p> <p>Danger</p> <p>Do not force push unless you know what you are doing. Force pushing will overwrite the remote repository with your local repository - all previous commits will be lost </p>"},{"location":"programming/version-control/git-github-intellij.html#pull-requests","title":"Pull Requests","text":"<p>While IntelliJ has a pull integration with GitHub, we encourage you to use the GitHub website to create and manage pull requests. However, if your still curious, you can visit JetBrains documentation regarding pull requests</p>"},{"location":"programming/version-control/git-in-action-multiple.html","title":"Git In Action (Multiple Repositories)","text":"<p>So far, we've only been working with a single local repository. However, Git is most powerful when working with multiple repositories, especially when working with multiple people.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#remote-repository","title":"Remote Repository","text":""},{"location":"programming/version-control/git-in-action-multiple.html#identifying-the-problem","title":"Identifying the Problem","text":"<p>Let's say I had a project on my computer, and I wanted to share it with someone else. I could send them the files, but what if I wanted to work on the project with them? I could send them the files, and then they could send me the files back, but that would be a pain to manage.</p> What are other potential issues? <p>Another issue here is that we wouldn't be able to work on the project at the same time without knowing what exactly changed. This leads to potential conflicts that could ultimately break code. It doesn't work at scale, and it's inefficient.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#incorporating-git","title":"Incorporating Git","text":"<p>What if we had a central repository that we could both access? That way, we could both work on the project, and we could both see the changes that the other person made.</p> <p>This is where a remote repository comes in. A remote repository is a repository that is stored on a server, and can be accessed by multiple people. This allows multiple people to work on the same project, and see the changes that the other person made. We'll touch more about how we're actually syncing changes in Pushing and Pulling.</p> <p>Info</p> <p>This is typically where Github or some other service comes in. Github is a website that allows you to host remote repositories.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#cloning-a-repository","title":"Cloning a Repository","text":"<p>Let's say we have a remote repository that we want to work on. We can clone the repository to our local machine, and then we can work on it locally.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#git-clone","title":"<code>git clone</code>","text":"<p>To clone a repository, we can use the <code>git clone</code> command. This command takes in a URL to a remote repository, and then clones it to our local machine.</p> <pre><code>git clone https://github.com/frc2204/ramdocs\n</code></pre> <pre><code>sequenceDiagram\n    participant Local1\n    participant Local2\n    participant Remote\n    Local1-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local1: Repository\n    Local2-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local2: Repository</code></pre> <p>Success</p> <p>This solves our previous issue of having to send files back and forth. Now, we can both work on the same project, and we can both see the changes that the other person made. Plus, it works at scale, $N$ people can work on the same project.</p> <p>Git is actually used in large scale projects, from enterprise software to open source projects like Linux.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#pushing-and-pulling","title":"Pushing and Pulling","text":"<p>Now that we have a remote repository, we can push and pull changes to and from the repository. This allows us to sync changes between multiple people.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#git-push","title":"<code>git push</code>","text":"<p>To push changes to a remote repository, we can use the <code>git push</code> command. This command will take all the new commits that we have made, and push them to the remote repository.</p> <pre><code>sequenceDiagram\n    participant Local\n    participant Remote\n    Local-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local: Repository\n\n    Local-&gt;&gt;Remote: git push\n</code></pre> <p>Now let's see how this works at scale</p> <pre><code>sequenceDiagram\n    participant Local1\n    participant Remote\n    participant Local2\n    Local1-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local1: Repository\n    Local2-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local2: Repository\n\n    Local1-&gt;&gt;Remote: git push</code></pre> <p>Question</p> <p><code>Local1</code> was able to push changes, but keep in mind that <code>Local2</code> isn't able to see the changes. How do we fix this?</p>"},{"location":"programming/version-control/git-in-action-multiple.html#git-pull","title":"<code>git pull</code>","text":"<p>To pull changes from a remote repository, we can use the <code>git pull</code> command. This command will take all the new commits that have been pushed to the remote repository, and pull them to our local repository.</p> <p>Warning</p> <p>This has the potential to cause conflicts. We'll talk about how to resolve these conflicts in Resolving Conflicts.</p> <pre><code>sequenceDiagram\n    participant Local1\n    participant Remote\n    participant Local2\n    Local1-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local1: Repository\n    Local2-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local2: Repository\n\n    Local1-&gt;&gt;Remote: git push\n    Local2-&gt;&gt;Remote: git pull\n    Remote-&gt;&gt;Local2: Repository</code></pre> <p>Success</p> <p>Now, <code>Local2</code> is able to see the changes that <code>Local1</code> made. This allows us to sync changes between multiple people.</p> <p>Info</p> <p><code>git pull</code> is actually just a combination of <code>git fetch</code> and <code>git merge</code>. <code>git fetch</code> will fetch all the new commits from the remote repository, and <code>git merge</code> will merge them into our local repository.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#git-fetch","title":"<code>git fetch</code>","text":"<p>Fetches the new commits from the remote repository, but won't merge them into our local repository. This allows us to see the changes that have been made, but it doesn't change our local repository.</p> <pre><code>sequenceDiagram\n    participant Local1\n    participant Remote\n    participant Local2\n    Local1-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local1: Repository\n    Local2-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local2: Repository\n\n    Local1-&gt;&gt;Remote: git push\n    Local2-&gt;&gt;Remote: git pull\n    Remote--&gt;&gt;Local2: Repository</code></pre>"},{"location":"programming/version-control/git-in-action-multiple.html#git-merge","title":"<code>git merge</code>","text":"<p>Merge the new commits into our local repository. This will change our local repository if no conflicts occur.</p> <pre><code>sequenceDiagram\n    participant Local1\n    participant Remote\n    participant Local2\n    Local1-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local1: Repository\n    Local2-&gt;&gt;Remote: git clone\n    Remote-&gt;&gt;Local2: Repository\n\n    Local1-&gt;&gt;Remote: git push\n    Local2-&gt;&gt;Remote: git fetch\n    Remote--&gt;&gt;+Local2: Repository\n    Local2-&gt;&gt;-Local2: git merge</code></pre>"},{"location":"programming/version-control/git-in-action-multiple.html#resolving-conflicts","title":"Resolving Conflicts","text":"<p>When a conflict occurs, Git lets us know, and we'll have to go in and manually resolve the conflict.</p> <p>Info</p> <p>You can use <code>git status</code> to see if there are any conflicts that need to be resolved, or abort the merge if you don't want to resolve the conflicts with <code>git merge --abort</code>.</p> <p>When a conflict occurs, Git will mark the conflict in the file with <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...</code>. You'll need to delete these elements and decide what you want to keep.</p> <p>Example</p> <p><pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is the code that you wrote\n=======\nThis is the code that the other person wrote\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; ...\n</code></pre> In this example, you'll need to decide whether you want to keep the code that you wrote, or the code that the other person wrote. Or both! It's up to you. </p> <p>Once you've resolved the conflict, you'll need to commit the changes.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#avoiding-conflicts","title":"Avoiding Conflicts","text":"<p>Conflicts are inevitable, but there are some things that you can do to avoid them.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#branching","title":"Branching","text":"<p>With branching, you can create a new branch, and work on that branch. This allows you to work on a feature without affecting the main branch. Once you're done with the feature, you can merge the branch into the main branch.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#git-checkout","title":"<code>git checkout</code>","text":"<p>To create a new branch, we can use the <code>git checkout</code> command. This command will create a new branch, and switch to that branch.</p> <pre><code>git checkout -b feature-branch\n</code></pre> <pre><code>gitGraph\n    commit\n    branch cool-feature\n    checkout cool-feature\n    commit\n    checkout main\n    checkout cool-feature\n    commit\n    checkout main\n    merge cool-feature</code></pre> <p>The code you change should only affect the feature you're working on, and not the main branch. This way, code remains somewhat isolated, and conflicts are less likely to occur.</p> <p>Info</p> <p>This pattern is called Feature Branching, and is our team's preferred workflow. We'll cover this in the next couple sections.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#communication","title":"Communication","text":"<p>Proper communication can help avoid conflicts. If you're working on a feature, let your teammates know. This way, they can avoid working on the same feature, and avoid conflicts.</p> <p>Info</p> <p>The programming lead will usually delegate features to each programmer, so this shouldn't be an issue.</p>"},{"location":"programming/version-control/git-in-action-multiple.html#code-with-me","title":"Code With Me","text":"<p>A feature within JetBrains IDEs, Code With Me allows you to collaborate with other people on the same project. This allows you to see what the other person is doing, and avoid conflicts. It's essentially the Google Docs of programming, but for whole projects.</p> <p>Tip</p> <p>It is highly recommended that you use Code With Me for real-time collaboration.</p> <p>Congratulations! You now know the basics of Git and collaboration! </p>"},{"location":"programming/version-control/git-in-action-single.html","title":"Git In Action (Single Repository)","text":""},{"location":"programming/version-control/git-in-action-single.html#creating-a-repository","title":"Creating a Repository","text":"<p>To create a repository, open your terminal and run <code>git init</code> in the desired directory you want to create a repository in.</p> What does <code>git init</code> actually do under the hood? <p><code>git init</code> actually creates a hidden folder called <code>.git</code> in the current working directory. This folder contains all the information about the repository, and should not be modified manually. You can see the contents of <code>.git</code> by enabling hidden files in your file explorer, or by running <code>ls -a</code> in your terminal.</p>"},{"location":"programming/version-control/git-in-action-single.html#the-google-docs-analogy","title":"The Google Docs Analogy","text":"<p>Let's take a step back for a moment. If your familiar with Google Docs, there's a feature that allows you to see the revision history of a document. </p> <p>You can check this out by opening any Google Doc you have, and clicking <code>File</code> &gt; <code>Version History</code> &gt; <code>See Version History</code>.</p> <p></p> <p>If I add something to the document, I can see that the document has been updated, and I can see the changes I made.</p> <p></p> <p>Git essentially does the same thing, but for your entire project. It keeps track of all the changes you make to your files, and allows you to restore old versions of your files.</p> <p>Unlike Google Docs, however, Git doesn't automatically track your changes. You have to tell Git what files you want to track, and when you want to take a snapshot of your files.</p> <p>So, the steps of using Git are as follows:</p> <ul> <li>Make changes to your files</li> <li>Tell Git what files you want to track</li> <li>Take a snapshot of your files</li> <li>Repeat</li> </ul>"},{"location":"programming/version-control/git-in-action-single.html#adding-and-committing-files","title":"Adding and Committing Files","text":"<p>After creating your repository with <code>git init</code>, git doesn't actually know what files you want to track. Here's what git knows about your repository so far:</p> <pre><code>flowchart TD\n\n    init{{git init}}\n\n    subgraph Project Directory\n        File1\n        File2\n        File3\n\n        git[[.git]]\n        staging((Staging Area))\n\n\n    end\n\n    init -- created --&gt; git\n    init -- created --&gt; staging  \n</code></pre> <p>Info</p> <p>The staging area isn't actually a directory or file, it's a file within the <code>.git</code> directory. For the sake of simplicity, we'll treat it as a separate entity.</p>"},{"location":"programming/version-control/git-in-action-single.html#git-add","title":"<code>git add</code>","text":"<p>You can tell git about your file with <code>git add &lt;filename&gt;</code>. Let's say I want to tell git about <code>File1</code>, so we run <code>git add File1</code>:</p> <pre><code>flowchart TD\n\n    add{{git add File1}}\n\n    subgraph Project Directory\n        File1T[File1]\n        File2\n        File3\n\n        git[[.git]]\n\n        subgraph Staging Area\n            File1\n        end\n\n    end\n\n    add --&gt; File1\n    File1T -- Stages--&gt; File1</code></pre> <p>Note that git adds your file to the staging area. What this means is that, once you stage a file, git starts tracking that specific change you made to the file.</p> Tip <p>You can also use <code>git add .</code> to add all files in the current directory, or <code>git add -A</code> to add all files in the entire repository.</p>"},{"location":"programming/version-control/git-in-action-single.html#git-commit","title":"<code>git commit</code>","text":"<p>Now let's take a snapshot of the staging area. This is called a commit, and you can create a commit with <code>git commit -m \"&lt;message&gt;\"</code>. The <code>-m</code> flag allows you to add a message to your commit, which is useful for keeping track of what changes you made.</p> <pre><code>flowchart TD\n\n    commit{{git commit message}}\n\n    subgraph Project Directory\n        File1A[File1]\n        File2\n        File3\n\n        subgraph .git\n            subgraph Commit1\n                File1\n            end\n        end\n\n        subgraph Staging Area\n            File1T[File1]\n        end\n\n    end\n\n    commit --&gt; File1\n    File1T -- commits --&gt; File1</code></pre> <p>After committing, git will no longer track changes to the file. If you make any changes to the file, you will need to stage it again before committing.</p> <p>Here's what git knows about your repository now:</p> <pre><code>flowchart TD\n\n    subgraph Project Directory\n        File1A[File1]\n        File2\n        File3\n\n        subgraph .git\n            subgraph Commit1\n                File1\n            end\n        end\n\n        staging((Staging Area))\n\n    end\n\n</code></pre> <p>Notice how <code>.git</code> contains <code>File1</code>. Git has made a snapshot to remember the state of the file at the time of the commit. Additionally, the staging area is now empty.</p> <p>Here's a cool tree diagram of what we've done so far (often referred to as a commit tree):</p> <pre><code>gitGraph\n    commit\n</code></pre> What's a SHA-1 hash? <p>SHA-1 is a cryptographic hash function that takes in some bytes and returns a series of bytes. What's interesting is that if you change even one byte of the input, the output will be completely different. This is useful for git because it allows us to uniquely identify commits.</p> <p>The SHA algorithm is also used in other cryptographic applications, such as storing your password in a database and even in Bitcoin. Learn more about hashing with this video.</p> Tip <p>You can also use <code>git commit -a -m \"&lt;message&gt;\"</code> to automatically stage all files that have been modified, and then commit them.</p>"},{"location":"programming/version-control/git-in-action-single.html#restoring-commits","title":"Restoring Commits","text":"<p>Let's say I've been working on my project for a while, and I've made a few commits. Here's what my commit tree looks like:</p> <pre><code>gitGraph\n    commit\n    commit\n    commit</code></pre> <p>And here's what git knows about my repository:</p> <pre><code>flowchart TD\n\n    subgraph Project Directory\n        File1A[File1]\n        File2A[File2]\n        File3A[File3]\n\n        subgraph .git\n            subgraph Commit1\n                File1\n            end\n\n            subgraph Commit2\n                File2\n            end\n\n            subgraph Commit3\n                File3\n            end\n\n        end\n\n        staging((Staging Area))\n\n    end\n\n    Commit1 --&gt; Commit2 --&gt; Commit3\n</code></pre> <p>Let's say I've made a change to <code>File2</code> such that it becomes <code>File2.1</code>. I'll add and commit these changes</p> <pre><code>flowchart TD\n\n    subgraph Project Directory\n        File1A[File1]\n        File2A[File2.1]\n        File3A[File3]\n\n        subgraph .git\n            subgraph Commit1\n                File1\n            end\n\n            subgraph Commit2\n                File2\n            end\n\n            subgraph Commit3\n                File3\n            end\n\n            subgraph Commit4\n                File2.1\n            end\n\n        end\n\n        staging((Staging Area))\n\n    end\n\n    Commit1 --&gt; Commit2 --&gt; Commit3 --&gt; Commit4\n</code></pre>"},{"location":"programming/version-control/git-in-action-single.html#git-revert","title":"<code>git revert</code>","text":"<p>Now let's say I want to undo my changes to <code>File2</code>. You can use <code>git revert &lt;commit&gt;</code> to undo a commit, with <code>&lt;commit&gt;</code> being the commit hash (or id). Let's revert to  <code>Commit3</code>:</p> <pre><code>flowchart TD\n\n    subgraph Project Directory\n        File1A[File1]\n        File2A[File2]\n        File3A[File3]\n\n        subgraph .git\n            subgraph Commit1\n                File1\n            end\n\n            subgraph Commit2\n                File2\n            end\n\n            subgraph Commit3\n                File3\n            end\n\n            subgraph Commit4\n                File2.1\n            end\n\n            subgraph Commit5\n\n            end\n\n        end\n\n        staging((Staging Area))\n\n    end\n\n    Commit1 --&gt; Commit2 --&gt; Commit3 --&gt; Commit4 --&gt; Commit5\n    Commit5 -.-&gt; File2\n</code></pre> <p>Here's what the commit tree looks like now:</p> <pre><code>gitGraph\n    commit\n    commit\n    commit\n    commit\n    commit type: REVERSE</code></pre> Info <p>There are other ways to undo commits, such as <code>git reset</code> and <code>git checkout</code>. Typically, <code>git revert</code> is the safest option, as it doesn't delete any commits, but the other two options are useful in certain situations and may be more elegant.</p> <p>Congratulations! You've learned the basics of git. Now let's learn how to collaborate with others.</p>"},{"location":"programming/version-control/git-intro.html","title":"Git Introduction","text":"<p>Git is a Version Control System used to manage project files. Typically, the strengths of Git are most apparent when working on a project with multiple people, but it can also be used for personal projects.</p> <p>In essence, Git allows you to create \u201ccheckpoints\u201d for your files, so you can track your progress and restore old versions.</p> <p>Locally, this allows you to manage your own files and code more effectively on a single computer.</p>"},{"location":"programming/version-control/git-intro.html#git-terminology","title":"Git Terminology","text":""},{"location":"programming/version-control/git-intro.html#repository","title":"Repository","text":"<p>A repository is a collection of files and folders that are tracked by Git. Think about this basically as a project folder</p>"},{"location":"programming/version-control/git-intro.html#commit","title":"Commit","text":"<p>A commit is a checkpoint or snapshot for a repository at a specific time, and contains a information about changes made, who made the changes, etc.</p>"},{"location":"programming/version-control/git-intro.html#branch","title":"Branch","text":"<p>A branch is a separate version of a repository. Branches are used to develop features or make changes to a repository without affecting the any \"main\" version. Once the changes are complete, the branch can be merged back into the main version, or even deleted.</p> <pre><code>gitGraph\n   commit\n   branch develop\n   checkout develop\n   commit\n   checkout main\n   merge develop\n   commit</code></pre> <p>Info</p> <p>This is a simple example of how branches work. In reality, branches are much more powerful and can be used in many different ways, especially when working with multiple people.    </p>"},{"location":"programming/version-control/git-intro.html#git-setup","title":"Git Setup","text":""},{"location":"programming/version-control/git-intro.html#windows","title":"Windows","text":"<p>Windows does not come with Git installed by default. To install Git, download the installer from here.</p> <p>Tip</p> <p>If you plan on installing IntelliJ IDEA, you can choose to install Git. Open the <code>Get from VCS</code> menu, and you should see a warning that Git is not installed. Click on the <code>Install</code> button, and you should be able to install Git from there.</p>"},{"location":"programming/version-control/git-intro.html#macos-and-linux","title":"MacOS and Linux","text":"<p>Git is already installed by default with MacOS and Linux. To check if it is installed, open a terminal and type <code>git --version</code>. If it is installed, you should see something like <code>git version X.XX.X</code>. </p> <p>If you do not see this, you can install Git from here, or from your appropriate package manager (Linux).</p>"},{"location":"programming/version-control/git-practice-activity.html","title":"Git Practice Activity","text":""},{"location":"programming/version-control/github.html","title":"Github","text":"<p>GitHub is one of the most popular platforms for software development and version control using git.</p> <p>Visit GitHub here.</p> <p>Info</p> <p>GitHub is not the only git hosting service. There are many other services, like Gitlab, Bitbucket, and Gitea.</p> <p>For our team, we'll be using GitHub, as it has an excellent balance of features for both beginners and advanced users.</p>"},{"location":"programming/version-control/github.html#setup","title":"Setup","text":""},{"location":"programming/version-control/github.html#creating-an-account","title":"Creating an Account","text":"<p>To create an account, go to github.com and follow the instructions.</p>"},{"location":"programming/version-control/github.html#joining-an-organization","title":"Joining an Organization","text":"<p>Once you have an account, you can join an organization. Submit your Github username to the programming lead, and you should receive an invite to join the organization in your email. This gives you read and write access to the organization's repositories.</p>"},{"location":"programming/version-control/github.html#student-developer-pack-optional","title":"Student Developer Pack (Optional)","text":"<p>GitHub offers a Student Developer Pack that gives students access to a bunch of free software and services. This includes free access to GitHub Pro and even the Jetbrains Suite of IDEs.</p> <p>Tip</p> <p>The software and access included with GitHub's Student Developer pack is worth well over $500+ per year. If your looking for access to software and services, this is a definite must-have.</p>"},{"location":"programming/version-control/pull-requests.html","title":"Pull Requests","text":"<p>Pull requests are a feature that makes it easier for developers to collaborate. They provide a user-friendly web interface for discussing proposed changes before integrating them into the official project.</p> <p></p> <p>As our team uses GitHub, we'll expect you to work on features and open pull requests to merge those features into the main repository. This allows us to review your code, and make sure that it works before merging it into the main repository.</p>"},{"location":"programming/version-control/pull-requests.html#why-pull-requests","title":"Why Pull Requests?","text":"<p>Let's refresh ourselves on what it means to pull changes from a source. </p> <p>When we make changes and/or produce new code (features), they will typically comprise of a series of commits on a unique branch. The thing is, these changes are all isolated on their own branches, so in order to bring the changes together we merge them together.</p> <p>However, there typically needs to be some sort of process to ensure that all changes are valid and work as intended. This is where pull requests come in.</p> <p>In their simplest form, pull requests are a mechanism for a developer to notify team members that they have completed a feature. Once their feature branch is ready, the developer files a pull request via their GitHub account. This lets everybody involved know that they need to review the code and merge it into the the desired branch.</p> <p>But, the pull request is more than just a notification - it\u2019s a dedicated forum for discussing the proposed feature. If there are any problems with the changes, teammates can post feedback in the pull request and even tweak the feature by pushing follow-up commits. All of this activity is tracked directly inside each pull request.</p>"},{"location":"programming/version-control/pull-requests.html#anatomy-of-pull-requests","title":"Anatomy of Pull Requests","text":"<p>When you file a pull request, all you\u2019re doing is requesting that another developer (e.g., the project maintainer) pulls your branch to merge it with the target branch.</p> <p>This means that you need to provide 4 pieces of information to file a pull request: </p> <ul> <li>The Source Repository</li> <li>The Source Branch</li> <li>The Destination Repository</li> <li>The Destination Branch.</li> </ul> <p>Note</p> <p>In most cases, the source repository and destination repository will be the same. It will only be different if you are following a forking workflow.</p>"},{"location":"programming/version-control/pull-requests.html#code-review","title":"Code Review","text":"<p>Code review and collaboration are at the core of pull requests. Depending on your role, you may be an author, a reviewer, or both on one or more pull requests.</p>"},{"location":"programming/version-control/pull-requests.html#authors-guidelines","title":"Authors Guidelines","text":"<p>Code review is a conversation. As an author, you should be prepared to answer questions and explain your code. You should also be open to receiving feedback and criticism. Remember, the goal is to improve the code and the project as a whole.</p> <p>Tip</p> <p>When you create a pull request, you'll be asked to provide a title and description. The title should be short and descriptive, and the description (can be optional) should provide context for the changes you've made.</p> <p>Things they should not be is \"N/A\", \"Merge changes\", or \"Fixes bug\".</p>"},{"location":"programming/version-control/pull-requests.html#reviewers-guidelines","title":"Reviewers Guidelines","text":"<p>During your code review, you'll comment with feedback, suggestions, and ideas. You may take time to consider if there are any obvious logic errors, all cases are fully implemented, and the code conforms to existing style guidelines.</p> <p>After your review, if the pull request is ready to be merged (or if you trust the author to resolve your tasks before merging), click the Approve button in the top right. A green checkmark appears next to your name in the Reviewers field after you approve a pull request.</p>"},{"location":"programming/version-control/pull-requests.html#pull-requests-in-action","title":"Pull Requests in Action","text":""},{"location":"programming/version-control/pull-requests.html#creating-a-pull-request","title":"Creating a Pull Request","text":"<p>Github offers their own documentation on creating pull requests. We'll go over the basics here.</p> <p>To create a pull request, you'll need to create a branch, and push that branch to GitHub.</p> <p>Once you've pushed your branch to GitHub, you can create a pull request. To do this, go to the repository on GitHub, and click the <code>Pull Requests</code> tab. </p> <p></p> <p>Then, click the <code>New Pull Request</code> button.</p> <p></p> Tip <p>GitHub may detect that you've pushed changes to a branch, and prompt you to create a pull request, directly from the repository page.</p> <p></p> <p>Next, GitHub will prompt you to select a base branch and a compare branch. </p> <ul> <li>The base branch is the branch that you want to merge your changes into. </li> <li>The compare branch is the branch that you want to merge into the base branch. </li> </ul> <p>Tip</p> <p>Typically, the compare branch is the branch that you created.</p> <p></p> <p>Once you've selected the base and compare branches, you can click the \"Create Pull Request\" button. You'll be prompted to enter a title and description for your pull request. Once you've done this, you can click the \"Create Pull Request\" button again.</p> <p>Add the programming lead as a reviewer, and click the \"Create Pull Request\" button again. This will create the pull request.</p>"},{"location":"programming/version-control/pull-requests.html#code-review_1","title":"Code Review","text":""},{"location":"programming/version-control/pull-requests.html#receiving-code-review","title":"Receiving Code Review","text":"<p>Once you've created a pull request, you can ask other members of the team to review your code and provide feedback. On our team, ask the programming lead to review your code. You can include other members at your own discretion.</p> <p>To request a review from a suggested person under Reviewers, next to their username, click Request.</p> <p></p> <p>Optionally, to request a review from someone other than a suggested person, click Reviewers.</p> <p>If you know the name of the person or team you'd like a review from, type the username of the person or the name you're asking to review your changes. Click their username to request a review.</p> <p></p>"},{"location":"programming/version-control/pull-requests.html#reviewing-code","title":"Reviewing Code","text":"<p>Pull up the pull request that you want to review. You can do this by clicking on the pull request in the pull request tab.</p> <p>Next, head over to  Files Changed</p> <p></p> <p>You can change the format of the diff view in this tab by clicking  and choosing the unified or split view. The choice you make will apply when you view the diff for other pull requests.</p> <p></p>"},{"location":"programming/version-control/pull-requests.html#adding-comments","title":"Adding Comments","text":"<p>Hover over the line of code where you'd like to add a comment, and click the blue comment icon. To add a comment on multiple lines, click and drag to select the range of lines, then click the blue comment icon.</p> <p></p> <p>You can also directly suggest changes with the  button</p> <p></p>"},{"location":"programming/version-control/pull-requests.html#approving-changes","title":"Approving Changes","text":"<p>When you're done commenting, click Start a review. If you have already started a review, you can click Add review comment.</p> <p></p> <ul> <li>Select Comment to leave general feedback without explicitly approving the changes or requesting additional changes.</li> <li>Select Approve to submit your feedback and approve merging the changes proposed in the pull request.</li> <li>Select Request changes to submit feedback that must be addressed before the pull request can be merged.</li> </ul> <p>Tip</p> <p>Before you submit your review, your line comments are pending and only visible to you. You can edit pending comments anytime before you submit your review. To cancel a pending review, including all of its pending comments, click Review changes above the changed code, then click Cancel review.</p>"}]}